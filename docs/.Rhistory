sds[i] <- sd(group_data)
ns[i] <- length(group_data)
lowers[i] <- means[i] - 1.96 * sds[i] / sqrt(ns[i])
uppers[i] <- means[i] + 1.96 * sds[i] / sqrt(ns[i])
}
# Create result data frame
forest_df <- data.frame(
Gender = genders,
mean = means,
sd = sds,
n = ns,
lower = lowers,
upper = uppers
)
ggplot(forest_df, aes(x = mean, y = Gender)) +
geom_point(size = 3, color = "steelblue") +
geom_errorbarh(aes(xmin = lower, xmax = upper), height = 0.2, color = "steelblue") +
geom_vline(xintercept = 120, linetype = "dashed") +
labs(title = "Systolic Blood Pressure by Gender",
x = "Mean Systolic BP (95% CI)",
y = "") +
theme_minimal()
ggplot(forest_df, aes(x = mean, y = Gender)) +
geom_point(size = 3, color = "steelblue") +
geom_errorbarh(aes(xmin = lower, xmax = upper), height = 0.2, color = "steelblue") +
geom_vline(xintercept = 120, linetype = "dashed") +
labs(title = "Forest plot of systolic BP by gender",
x = "Mean systolic BP (95% CI) [mmHg]",
y = "") +
theme_minimal()
# Remove rows with missing gender or BP
clean_data <- merged_nhanes[!is.na(merged_nhanes$RIAGENDR) & !is.na(merged_nhanes$BPXSY1), ]
# Assign factor labels for gender
clean_data$Gender <- factor(clean_data$RIAGENDR, labels = c("Male", "Female"))
# Get unique gender levels
genders <- levels(clean_data$Gender)
# Initialize vectors
means <- numeric(length(genders))
sds <- numeric(length(genders))
ns <- numeric(length(genders))
lowers <- numeric(length(genders))
uppers <- numeric(length(genders))
# Loop over gender groups to compute stats
for (i in seq_along(genders)) {
group_data <- clean_data$BPXSY1[clean_data$Gender == genders[i]]
means[i] <- mean(group_data)
sds[i] <- sd(group_data)
ns[i] <- length(group_data)
lowers[i] <- means[i] - 1.96 * sds[i] / sqrt(ns[i])
uppers[i] <- means[i] + 1.96 * sds[i] / sqrt(ns[i])
}
# Create result data frame
forest_df <- data.frame(
Gender = genders,
mean = means,
sd = sds,
n = ns,
lower = lowers,
upper = uppers
)
ggplot(forest_df, aes(x = mean, y = Gender)) +
geom_point(size = 3, color = "steelblue") +
geom_errorbarh(aes(xmin = lower, xmax = upper), height = 0.2, color = "steelblue") +
geom_vline(xintercept = 120, linetype = "dashed") +
labs(title = "Forest plot of systolic BP by gender",
x = "Systolic BP (95% CI) [mmHg]",
y = "") +
theme_minimal()
library(forestplot)
# Calculate summary statistics by gender
genders <- unique(merged_nhanes$RIAGENDR)
means <- numeric(length(genders))
sds <- numeric(length(genders))
ns <- numeric(length(genders))
lowers <- numeric(length(genders))
uppers <- numeric(length(genders))
gender_labels <- character(length(genders))
for (i in seq_along(genders)) {
group_data <- merged_nhanes$BPXSY1[merged_nhanes$RIAGENDR == genders[i]]
group_data <- group_data[!is.na(group_data)]
means[i] <- mean(group_data)
sds[i] <- sd(group_data)
ns[i] <- length(group_data)
lowers[i] <- means[i] - 1.96 * sds[i] / sqrt(ns[i])
uppers[i] <- means[i] + 1.96 * sds[i] / sqrt(ns[i])
gender_labels[i] <- genders[i]
}
# Create the forest plot
forestplot(labeltext = c("Male","Female"),
mean = means,
lower = lowers,
upper = uppers,
zero = 120,
grid = TRUE,
ci.vertices = TRUE,
xlab = "Systolic BP (95% CI) [mmHg]",
col = fpColors(box = "steelblue", line = "steelblue"),
title = "Systolic BP by gender")
# Create the forest plot
forestplot(labeltext = c("Male","Female"),
mean = means,
lower = lowers,
upper = uppers,
zero = 120,
grid = TRUE,
ci.vertices = TRUE,
xlab = "Systolic BP (95% CI) [mmHg]",
col = fpColors(box = "steelblue", line = "steelblue"),
title = "Forest plot of systolic BP by gender")
# Get unique gender levels
genders <- levels(clean_data$Gender)
# Remove rows with missing gender or BP
clean_data <- merged_nhanes[!is.na(merged_nhanes$RIAGENDR) & !is.na(merged_nhanes$BPXSY1), ]
# Assign factor labels for gender
clean_data$Gender <- factor(clean_data$RIAGENDR, labels = c("Male", "Female"))
# Get unique gender levels
genders <- levels(clean_data$Gender)
# Initialize vectors
means <- numeric(length(genders))
sds <- numeric(length(genders))
ns <- numeric(length(genders))
lowers <- numeric(length(genders))
uppers <- numeric(length(genders))
# Loop over gender groups to compute stats
for (i in seq_along(genders)) {
group_data <- clean_data$BPXSY1[clean_data$Gender == genders[i]]
means[i] <- mean(group_data)
sds[i] <- sd(group_data)
ns[i] <- length(group_data)
lowers[i] <- means[i] - 1.96 * sds[i] / sqrt(ns[i])
uppers[i] <- means[i] + 1.96 * sds[i] / sqrt(ns[i])
}
# Create result data frame
forest_df <- data.frame(
Gender = genders,
mean = means,
sd = sds,
n = ns,
lower = lowers,
upper = uppers
)
ggplot(forest_df, aes(x = mean, y = Gender)) +
geom_point(size = 3, color = "steelblue") +
geom_errorbarh(aes(xmin = lower, xmax = upper), height = 0.2, color = "steelblue") +
geom_vline(xintercept = 120, linetype = "dashed") +
labs(title = "Forest plot of systolic BP by gender",
x = "Systolic BP (95% CI) [mmHg]",
y = "") +
theme_minimal()
# Remove rows with missing gender or BP
clean_data <- merged_nhanes[!is.na(merged_nhanes$RIAGENDR) & !is.na(merged_nhanes$BPXSY1), ]
# Assign factor labels for gender
clean_data$Gender <- factor(clean_data$RIAGENDR, labels = c("Female", "Male"))
# Get unique gender levels
genders <- levels(clean_data$Gender)
# Initialize vectors
means <- numeric(length(genders))
sds <- numeric(length(genders))
ns <- numeric(length(genders))
lowers <- numeric(length(genders))
uppers <- numeric(length(genders))
# Loop over gender groups to compute stats
for (i in seq_along(genders)) {
group_data <- clean_data$BPXSY1[clean_data$Gender == genders[i]]
means[i] <- mean(group_data)
sds[i] <- sd(group_data)
ns[i] <- length(group_data)
lowers[i] <- means[i] - 1.96 * sds[i] / sqrt(ns[i])
uppers[i] <- means[i] + 1.96 * sds[i] / sqrt(ns[i])
}
# Create result data frame
forest_df <- data.frame(
Gender = genders,
mean = means,
sd = sds,
n = ns,
lower = lowers,
upper = uppers
)
ggplot(forest_df, aes(x = mean, y = Gender)) +
geom_point(size = 3, color = "steelblue") +
geom_errorbarh(aes(xmin = lower, xmax = upper), height = 0.2, color = "steelblue") +
geom_vline(xintercept = 120, linetype = "dashed") +
labs(title = "Forest plot of systolic BP by gender",
x = "Systolic BP (95% CI) [mmHg]",
y = "") +
theme_minimal()
# Get unique gender levels
genders <- levels(merged_nhanes$RIAGENDR)
genders
erged_nhanes$RIAGENDR
merged_nhanes$RIAGENDR
# Get unique gender levels
genders <- unique(merged_nhanes$RIAGENDR)
# Initialize vectors
means <- numeric(length(genders))
sds <- numeric(length(genders))
ns <- numeric(length(genders))
lowers <- numeric(length(genders))
uppers <- numeric(length(genders))
# Loop over gender groups to compute stats
for (i in seq_along(genders)) {
group_data <- clean_data$BPXSY1[clean_data$Gender == genders[i]]
means[i] <- mean(group_data)
sds[i] <- sd(group_data)
ns[i] <- length(group_data)
lowers[i] <- means[i] - 1.96 * sds[i] / sqrt(ns[i])
uppers[i] <- means[i] + 1.96 * sds[i] / sqrt(ns[i])
}
# Create result data frame
forest_df <- data.frame(
Gender = genders,
mean = means,
sd = sds,
n = ns,
lower = lowers,
upper = uppers
)
forest_df
forest_df
# Loop over gender groups to compute stats
for (i in seq_along(genders)) {
group_data <- merged_nhanes$BPXSY1[merged_nhanes$RIAGENDR == genders[i]]
group_data <- group_data[!is.na(group_data)]
means[i] <- mean(group_data)
sds[i] <- sd(group_data)
ns[i] <- length(group_data)
lowers[i] <- means[i] - 1.96 * sds[i] / sqrt(ns[i])
uppers[i] <- means[i] + 1.96 * sds[i] / sqrt(ns[i])
gender_labels[i] <- genders[i]
}
means
lowers
# Create result data frame
(forest_df <- data.frame(
Gender = genders,
mean = means,
sd = sds,
n = ns,
lower = lowers,
upper = uppers
))
ggplot(forest_df, aes(x = mean, y = Gender)) +
geom_point(size = 3, color = "steelblue") +
geom_errorbarh(aes(xmin = lower, xmax = upper), height = 0.2, color = "steelblue") +
geom_vline(xintercept = 120, linetype = "dashed") +
labs(title = "Forest plot of systolic BP by gender",
x = "Systolic BP (95% CI) [mmHg]",
y = "") +
theme_minimal()
# Count gender
gender_counts <- as.data.frame(table(merged_nhanes$RIAGENDR))
merged_nhanes[merged_nhanes$SMQ020 %in% c("Yes","No")]
colnames(gender_counts) <- c("Gender", "n")
# Compute proportions
gender_counts$prop <- gender_counts$n / sum(gender_counts$n)
# Compute y positions for labels (center of each slice)
gender_counts$ypos <- cumsum(gender_counts$prop) - 0.5 * gender_counts$prop
# Resulting data frame
gender_counts
ggplot(gender_counts, aes(x = "", y = prop, fill = Gender)) +
geom_col(width = 1) +
coord_polar(theta = "y") +
geom_text(aes(y = ypos, label = scales::percent(prop)), color = "white") +
scale_fill_manual(values = c("salmon", "skyblue")) +
labs(title = "Pie chart of gender distribution") +
theme_void()
ggplot(gender_counts, aes(x = "", y = prop, fill = Gender)) +
geom_col(width = 1) +
coord_polar(theta = "y") +
geom_text(aes(y = ypos, label = scales::percent(prop)), color = "white") +
scale_fill_manual(values = c("salmon", "skyblue")) +
labs(title = "Pie chart of gender distribution") +
theme_void()
# Load the merged_nhanes CSV file
merged_nhanes <- read.csv("/home/claire/Documents/GitHub/rforphysicians/data_sets/merged_nhanes.csv")
library(ggplot2) # after installation
# Calculate summary statistics by gender
genders <- unique(merged_nhanes$RIAGENDR)
means <- numeric(length(genders))
sds <- numeric(length(genders))
ns <- numeric(length(genders))
lowers <- numeric(length(genders))
uppers <- numeric(length(genders))
# Loop over gender groups to compute stats
for (i in seq_along(genders)) {
group_data <- merged_nhanes$BPXSY1[merged_nhanes$Gender == genders[i]]
means[i] <- mean(group_data)
sds[i] <- sd(group_data)
ns[i] <- length(group_data)
lowers[i] <- means[i] - 1.96 * sds[i] / sqrt(ns[i])
uppers[i] <- means[i] + 1.96 * sds[i] / sqrt(ns[i])
}
# Create result data frame
(forest_df <- data.frame(
Gender = genders,
mean = means,
sd = sds,
n = ns,
lower = lowers,
upper = uppers
))
forest_df
seq_along(genders)
genders
i = 1
group_data <- merged_nhanes$BPXSY1[merged_nhanes$Gender == genders[i]]
group_data
merged_nhanes$BPXSY1[merged_nhanes$Gender == genders[1]]
# Loop over gender groups to compute stats
for (i in seq_along(genders)) {
group_data <- merged_nhanes$BPXSY1[merged_nhanes$RIAGENDR == genders[i]]
means[i] <- mean(group_data)
sds[i] <- sd(group_data)
ns[i] <- length(group_data)
lowers[i] <- means[i] - 1.96 * sds[i] / sqrt(ns[i])
uppers[i] <- means[i] + 1.96 * sds[i] / sqrt(ns[i])
}
# Create result data frame
(forest_df <- data.frame(
Gender = genders,
mean = means,
sd = sds,
n = ns,
lower = lowers,
upper = uppers
))
i = 1
group_data <- merged_nhanes$BPXSY1[merged_nhanes$RIAGENDR == genders[i]]
group_data
means[i] <- mean(group_data)
sds[i] <- sd(group_data)
# Calculate summary statistics by gender
genders <- unique(merged_nhanes$RIAGENDR)
means <- numeric(length(genders))
sds <- numeric(length(genders))
ns <- numeric(length(genders))
lowers <- numeric(length(genders))
uppers <- numeric(length(genders))
# Loop over gender groups to compute stats
for (i in seq_along(genders)) {
group_data <- merged_nhanes$BPXSY1[merged_nhanes$RIAGENDR == genders[i]]
means[i] <- mean(group_data)
sds[i] <- sd(group_data)
ns[i] <- length(group_data)
lowers[i] <- means[i] - 1.96 * sds[i] / sqrt(ns[i])
uppers[i] <- means[i] + 1.96 * sds[i] / sqrt(ns[i])
}
# Create result data frame
(forest_df <- data.frame(
Gender = genders,
mean = means,
sd = sds,
n = ns,
lower = lowers,
upper = uppers
))
seq_along(genders)
i = 1
group_data <- merged_nhanes$BPXSY1[merged_nhanes$RIAGENDR == genders[i]]
means[i] <- mean(group_data)
sds[i] <- sd(group_data)
ns[i] <- length(group_data)
lowers[i] <- means[i] - 1.96 * sds[i] / sqrt(ns[i])
uppers[i] <- means[i] + 1.96 * sds[i] / sqrt(ns[i])
means
mean(group_data)
group_data <- merged_nhanes$BPXSY1[merged_nhanes$RIAGENDR == genders[i]]
group_data
mean(group_data)
mean(group_data)
str(group_data)
# Calculate summary statistics by gender
genders <- unique(merged_nhanes$RIAGENDR)
means <- numeric(length(genders))
sds <- numeric(length(genders))
ns <- numeric(length(genders))
lowers <- numeric(length(genders))
uppers <- numeric(length(genders))
# Loop over gender groups to compute stats
for (i in seq_along(genders)) {
group_data <- merged_nhanes$BPXSY1[merged_nhanes$RIAGENDR == genders[i]]
means[i] <- mean(group_data)
sds[i] <- sd(group_data)
ns[i] <- length(group_data)
lowers[i] <- means[i] - 1.96 * sds[i] / sqrt(ns[i])
uppers[i] <- means[i] + 1.96 * sds[i] / sqrt(ns[i])
}
# Create result data frame
(forest_df <- data.frame(
Gender = genders,
mean = means,
sd = sds,
n = ns,
lower = lowers,
upper = uppers
))
ggplot(forest_df, aes(x = mean, y = Gender)) +
geom_point(size = 3, color = "steelblue") +
geom_errorbarh(aes(xmin = lower, xmax = upper), height = 0.2, color = "steelblue") +
geom_vline(xintercept = 120, linetype = "dashed") +
labs(title = "Forest plot of systolic BP by gender",
x = "Systolic BP (95% CI) [mmHg]",
y = "") +
theme_minimal()
# Calculate summary statistics by gender
genders <- unique(merged_nhanes$RIAGENDR)
means <- numeric(length(genders))
sds <- numeric(length(genders))
ns <- numeric(length(genders))
lowers <- numeric(length(genders))
uppers <- numeric(length(genders))
# Create result data frame
(forest_df <- data.frame(
Gender = genders,
mean = means,
sd = sds,
n = ns,
lower = lowers,
upper = uppers
))
i = 1
group_data <- merged_nhanes$BPXSY1[merged_nhanes$RIAGENDR == genders[i]]
mean(group_data)
# Loop over gender groups to compute stats
for (i in seq_along(genders)) {
group_data <- merged_nhanes$BPXSY1[merged_nhanes$RIAGENDR == genders[i]]
group_data <- group_data[!is.na(group_data)]
means[i] <- mean(group_data)
sds[i] <- sd(group_data)
ns[i] <- length(group_data)
lowers[i] <- means[i] - 1.96 * sds[i] / sqrt(ns[i])
uppers[i] <- means[i] + 1.96 * sds[i] / sqrt(ns[i])
}
# Create result data frame
(forest_df <- data.frame(
Gender = genders,
mean = means,
sd = sds,
n = ns,
lower = lowers,
upper = uppers
))
ggplot(forest_df, aes(x = mean, y = Gender)) +
geom_point(size = 3, color = "steelblue") +
geom_errorbarh(aes(xmin = lower, xmax = upper), height = 0.2, color = "steelblue") +
geom_vline(xintercept = 120, linetype = "dashed") +
labs(title = "Forest plot of systolic BP by gender",
x = "Systolic BP (95% CI) [mmHg]",
y = "") +
theme_minimal()
library(tidyverse)
v <- c(1,2,3,4)
v %>%
str()
str(v)
library(tidyverse)
# Let us do the same operation, once using the pipe, once not.
v <- c(1,2,3,4)
v %>%
str()
str(v)
log(v^2/9)
v %>%
sqrt() %>%
log() %>%
str()
str(log(sqrt(v)))
v %>%
sqrt() %>%
log() %>%
str()
library(tidyverse)
# Let's do the same operation twice: once using the pipe, once without
# No pipe:
str(c(1,2,3,4))
# With pipe:
c(1,2,3,4) %>%
str()
# Not too exciting yet, but consider a more complex case:
summary(log(sqrt(na.omit(c(1, 4, NA, 16, 25)))))
# With the pipe, we can rewrite this more readably:
c(1, 4, NA, 16, 25) %>%
na.omit() %>%
sqrt() %>%
log() %>%
summary()
cars$speed_group <- cut(cars$speed, breaks = c(0, 10, 20, 30),
labels = c("Low", "Medium", "High"))
avg_dist <- aggregate(dist ~ speed_group, data = cars, mean)
n_obs <- aggregate(dist ~ speed_group, data = cars, length)
names(n_obs)[2] <- "n"
summary_df <- merge(avg_dist, n_obs, by = "speed_group")
summary_df
# With dplyr, no pipe:
cars <- mutate(cars, speed_group = cut(speed, breaks = c(0, 10, 20, 30), labels = c("Low", "Medium", "High")))
summary_df <- summarise(group_by(cars, speed_group),
avg_dist = mean(dist),
n = n())
summary_df
# With dplyr and the pipe
cars %>%
mutate(speed_group = cut(speed, breaks = c(0, 10, 20, 30),
labels = c("Low", "Medium","High"))) %>%
group_by(speed_group) %>%
summarise(
avg_dist = mean(dist),
n = n()
)
knitr::include_graphics(path = "images/documentation.png")
setwd("~/Documents/GitHub/rforphysicians/docs")
knitr::include_graphics(path = "images/documentation.png")
