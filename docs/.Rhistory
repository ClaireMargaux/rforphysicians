ns[i] <- length(group_data)
lowers[i] <- means[i] - 1.96 * sds[i] / sqrt(ns[i])
uppers[i] <- means[i] + 1.96 * sds[i] / sqrt(ns[i])
gender_labels[i] <- ifelse(genders[i] == 1, "Male", "Female")
}
# Prepare the table text for the forest plot
tabletext <- cbind(
c("Gender", gender_labels),
c("Mean systolic BP", sprintf("%.1f", means))
)
# Create the forest plot
forestplot(labeltext = tabletext,
mean = means,
lower = lowers,
upper = uppers,
zero = 120,
xlog = FALSE,
boxsize = 0.2,
col = fpColors(box = "steelblue", line = "steelblue"),
title = "Systolic Blood Pressure by Gender")
# Calculate summary statistics by gender
genders <- unique(merged_nhanes$RIAGENDR)
means <- numeric(length(genders))
sds <- numeric(length(genders))
ns <- numeric(length(genders))
lowers <- numeric(length(genders))
uppers <- numeric(length(genders))
gender_labels <- character(length(genders))
for (i in seq_along(genders)) {
group_data <- merged_nhanes$BPXSY1[merged_nhanes$RIAGENDR == genders[i]]
group_data <- group_data[!is.na(group_data)]
means[i] <- mean(group_data)
sds[i] <- sd(group_data)
ns[i] <- length(group_data)
lowers[i] <- means[i] - 1.96 * sds[i] / sqrt(ns[i])
uppers[i] <- means[i] + 1.96 * sds[i] / sqrt(ns[i])
gender_labels[i] <- ifelse(genders[i] == 1, "Male", "Female")
}
genders
group_data
for (i in seq_along(genders)) {
group_data <- merged_nhanes$BPXSY1[merged_nhanes$RIAGENDR == genders[i]]
group_data <- group_data[!is.na(group_data)]
means[i] <- mean(group_data)
sds[i] <- sd(group_data)
ns[i] <- length(group_data)
lowers[i] <- means[i] - 1.96 * sds[i] / sqrt(ns[i])
uppers[i] <- means[i] + 1.96 * sds[i] / sqrt(ns[i])
gender_labels[i] <- ifelse(genders[i] == 1, "Male", "Female")
}
lowers
gender_labels
# Prepare the table text for the forest plot
tabletext <- cbind(
c("Gender", gender_labels),
c("Mean systolic BP", sprintf("%.1f", means))
)
tabletext
gender_labels
# Calculate summary statistics by gender
genders <- unique(merged_nhanes$RIAGENDR)
means <- numeric(length(genders))
sds <- numeric(length(genders))
ns <- numeric(length(genders))
lowers <- numeric(length(genders))
uppers <- numeric(length(genders))
gender_labels <- character(length(genders))
gender_labels <- character(length(genders))
gender_labels
merged_nhanes$RIAGENDR
for (i in seq_along(genders)) {
group_data <- merged_nhanes$BPXSY1[merged_nhanes$RIAGENDR == genders[i]]
group_data <- group_data[!is.na(group_data)]
means[i] <- mean(group_data)
sds[i] <- sd(group_data)
ns[i] <- length(group_data)
lowers[i] <- means[i] - 1.96 * sds[i] / sqrt(ns[i])
uppers[i] <- means[i] + 1.96 * sds[i] / sqrt(ns[i])
gender_labels[i] <- ifelse(genders[i] == "Male", "Male", "Female")
}
# Prepare the table text for the forest plot
tabletext <- cbind(
c("Gender", gender_labels),
c("Mean systolic BP", sprintf("%.1f", means))
)
tabletext
# Create the forest plot
forestplot(labeltext = tabletext,
mean = means,
lower = lowers,
upper = uppers,
zero = 120,
xlog = FALSE,
boxsize = 0.2,
col = fpColors(box = "steelblue", line = "steelblue"),
title = "Systolic Blood Pressure by Gender")
means
lowers
uppers
# Create the forest plot
forestplot(labeltext = tabletext,
mean = means,
lower = lowers,
upper = uppers,
zero = 120,
xlog = FALSE,
boxsize = 0.2,
col = fpColors(box = "steelblue", line = "steelblue"),
title = "Systolic Blood Pressure by Gender")
tabletext
means
lowers
uppers
# Create the forest plot
forestplot(labeltext = tabletext,
mean = means,
lower = lowers,
upper = uppers,
zero = 120,
xlog = FALSE,
boxsize = 0.2,
col = fpColors(box = "steelblue", line = "steelblue"),
title = "Systolic Blood Pressure by Gender")
# Prepare the table text for the forest plot
tabletext <- cbind(
c("Gender", gender_labels),
c("Mean systolic BP", sprintf("%.1f", means))
)[-1, ]
# Create the forest plot
forestplot(labeltext = tabletext,
mean = means,
lower = lowers,
upper = uppers,
zero = 120,
xlog = FALSE,
boxsize = 0.2,
col = fpColors(box = "steelblue", line = "steelblue"),
title = "Systolic Blood Pressure by Gender")
tabletext
ggplot(merged_nhanes, aes(x = RIDAGEYR, y = BPXSY1)) +
geom_point(alpha = 0.5) +
labs(title = "Scatterplot of Age vs. Systolic BP",
x = "Age of participant",
y = "Systolic blood pressure (1st reading)") +
theme_minimal()
library(ggplot2) # after installation
ggplot(merged_nhanes, aes(x = RIDAGEYR, y = BPXSY1)) +
geom_point(alpha = 0.5) +
labs(title = "Scatterplot of Age vs. Systolic BP",
x = "Age of participant",
y = "Systolic blood pressure (1st reading)") +
theme_minimal()
ggplot(merged_nhanes, aes(x = factor(RIAGENDR, labels = c("Male", "Female")), y = BPXSY1, fill = factor(RIAGENDR))) +
geom_boxplot() +
scale_fill_manual(values = c("salmon", "skyblue")) +
labs(title = "Blood Pressure by Gender",
x = "Gender",
y = "Systolic blood pressure (1st reading)") +
theme_minimal() +
theme(legend.position = "none")
merged_nhanes$age_group <- cut(merged_nhanes$RIDAGEYR, breaks = seq(10, 80, 10))
avg_bp <- merged_nhanes %>%
group_by(age_group) %>%
summarise(mean_bp = mean(BPXSY1, na.rm = TRUE))
ggplot(avg_bp, aes(x = age_group, y = mean_bp)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Average Systolic BP by Age Group",
x = "Age group",
y = "Average Systolic BP") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(merged_nhanes, aes(x = BMXBMI)) +
geom_histogram(bins = 30, fill = "steelblue", color = "black") +
labs(title = "Histogram of BMI",
x = "Body Mass Index (BMI)",
y = "Count") +
theme_minimal()
ggplot(merged_nhanes, aes(x = BMXBMI)) +
geom_histogram(bins = 30, fill = "steelblue", color = "white") +
labs(title = "Histogram of BMI",
x = "Body Mass Index (BMI)",
y = "Count") +
theme_minimal()
avg_bp$midpoint <- seq(15, 75, 10)  # midpoint of intervals
ggplot(avg_bp, aes(x = midpoint, y = mean_bp)) +
geom_line() +
geom_point() +
labs(title = "Average Systolic BP by Age Group",
x = "Age (midpoint of group)",
y = "Average Systolic BP") +
theme_minimal()
gender_counts <- merged_nhanes %>%
count(RIAGENDR) %>%
mutate(gender = ifelse(RIAGENDR == 1, "Male", "Female"),
prop = n / sum(n),
ypos = cumsum(prop) - 0.5*prop)
ggplot(gender_counts, aes(x = "", y = prop, fill = gender)) +
geom_col(width = 1) +
coord_polar(theta = "y") +
geom_text(aes(y = ypos, label = scales::percent(prop)), color = "white") +
scale_fill_manual(values = c("salmon", "skyblue")) +
labs(title = "Gender Distribution") +
theme_void()
gender_counts <- merged_nhanes %>%
count(RIAGENDR) %>%
mutate(gender = ifelse(RIAGENDR == "Male", "Male", "Female"),
prop = n / sum(n),
ypos = cumsum(prop) - 0.5*prop)
ggplot(gender_counts, aes(x = "", y = prop, fill = gender)) +
geom_col(width = 1) +
coord_polar(theta = "y") +
geom_text(aes(y = ypos, label = scales::percent(prop)), color = "white") +
scale_fill_manual(values = c("salmon", "skyblue")) +
labs(title = "Gender Distribution") +
theme_void()
gender_counts <- merged_nhanes %>%
count(RIAGENDR) %>%
mutate(Gender = ifelse(RIAGENDR == "Male", "Male", "Female"),
prop = n / sum(n),
ypos = cumsum(prop) - 0.5*prop)
ggplot(gender_counts, aes(x = "", y = prop, fill = Gender)) +
geom_col(width = 1) +
coord_polar(theta = "y") +
geom_text(aes(y = ypos, label = scales::percent(prop)), color = "white") +
scale_fill_manual(values = c("salmon", "skyblue")) +
labs(title = "Gender Distribution") +
theme_void()
library(vcd)
smoke_gender_table <- table(
Gender = factor(merged_nhanes$RIAGENDR, labels = c("Male", "Female")),
Smoked_100_cigs = factor(merged_nhanes$SMQ020, labels = c("No", "Yes"))
)
library(vcd)
smoke_gender_table <- table(
Gender = factor(merged_nhanes$RIAGENDR, labels = c("Male", "Female")),
Smoked_100_cigs = factor(merged_nhanes$SMQ020, labels = c("No", "Yes"))
)
forest_df <- merged_nhanes %>%
filter(!is.na(RIAGENDR) & !is.na(BPXSY1)) %>%
group_by(Gender = factor(RIAGENDR, labels = c("Male", "Female"))) %>%
summarise(
mean = mean(BPXSY1),
sd = sd(BPXSY1),
n = n(),
lower = mean - 1.96 * sd / sqrt(n),
upper = mean + 1.96 * sd / sqrt(n)
)
ggplot(forest_df, aes(x = mean, y = Gender)) +
geom_point(size = 3, color = "steelblue") +
geom_errorbarh(aes(xmin = lower, xmax = upper), height = 0.2, color = "steelblue") +
geom_vline(xintercept = 120, linetype = "dashed") +
labs(title = "Systolic Blood Pressure by Gender",
x = "Mean Systolic BP (95% CI)",
y = "") +
theme_minimal()
# Keep only rows where SMQ020 is 1 (Yes) or 2 (No) and RIAGENDR is 1 or 2
valid_idx <- merged_nhanes$SMQ020 %in% c(1, 2) & merged_nhanes$RIAGENDR %in% c(1, 2)
valid_data <- merged_nhanes[valid_idx, ]
# Create labeled contingency table
smoke_gender_table <- table(
Gender = factor(valid_data$RIAGENDR, labels = c("Male", "Female")),
Smoked_100_cigs = factor(valid_data$SMQ020, labels = c("Yes", "No"))
)
# Plot mosaic
mosaic(smoke_gender_table, shade = TRUE, legend = TRUE,
main = "Smoking Status by Gender")
# Keep only rows where SMQ020 is 1 (Yes) or 2 (No) and RIAGENDR is 1 or 2
valid_idx <- merged_nhanes$SMQ020 %in% c(1, 2) & merged_nhanes$RIAGENDR %in% c("Male", "Female")
valid_data <- merged_nhanes[valid_idx, ]
# Create labeled contingency table
smoke_gender_table <- table(
Gender = factor(valid_data$RIAGENDR, labels = c("Male", "Female")),
Smoked_100_cigs = factor(valid_data$SMQ020, labels = c("Yes", "No"))
)
# Plot mosaic
mosaic(smoke_gender_table, shade = TRUE, legend = TRUE,
main = "Smoking Status by Gender")
valid_data
# Keep only rows where SMQ020 is 1 (Yes) or 2 (No) and RIAGENDR is 1 or 2
valid_idx <- merged_nhanes$SMQ020 %in% c(1, 2) & merged_nhanes$RIAGENDR %in% c("Male", "Female")
valid_idx
# Keep only rows where SMQ020 is 1 (Yes) or 2 (No) and RIAGENDR is 1 or 2
valid_idx <- merged_nhanes$SMQ020 %in% c("Yes", "No") & merged_nhanes$RIAGENDR %in% c("Male", "Female")
valid_data <- merged_nhanes[valid_idx, ]
# Create labeled contingency table
smoke_gender_table <- table(
Gender = factor(valid_data$RIAGENDR, labels = c("Male", "Female")),
Smoked_100_cigs = factor(valid_data$SMQ020, labels = c("Yes", "No"))
)
# Plot mosaic
mosaic(smoke_gender_table, shade = TRUE, legend = TRUE,
main = "Smoking Status by Gender")
merged_nhanes$age_group <- cut(merged_nhanes$RIDAGEYR, breaks = seq(10, 80, 10))
avg_bp <- merged_nhanes %>%
group_by(age_group) %>%
summarise(mean_bp = mean(BPXSY1, na.rm = TRUE))
ggplot(avg_bp, aes(x = age_group, y = mean_bp)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Average Systolic BP by Age Group",
x = "Age group",
y = "Average Systolic BP") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create age groups
merged_nhanes$age_group <- cut(merged_nhanes$RIDAGEYR, breaks = seq(10, 80, 10))
# Compute the mean systolic BP per age group using aggregate
avg_bp <- aggregate(BPXSY1 ~ age_group, data = merged_nhanes, FUN = function(x) mean(x, na.rm = TRUE))
ggplot(avg_bp, aes(x = age_group, y = mean_bp)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Average Systolic BP by Age Group",
x = "Age group",
y = "Average Systolic BP") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create age groups
merged_nhanes$age_group <- cut(merged_nhanes$RIDAGEYR, breaks = seq(10, 80, 10))
# Create age groups
merged_nhanes$age_group <- cut(merged_nhanes$RIDAGEYR, breaks = seq(10, 80, 10))
# Compute the mean systolic BP per age group using aggregate
avg_bp <- aggregate(BPXSY1 ~ age_group, data = merged_nhanes, FUN = function(x) mean(x, na.rm = TRUE))
ggplot(avg_bp, aes(x = age_group, y = mean_bp)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Average Systolic BP by Age Group",
x = "Age group",
y = "Average Systolic BP") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create age groups
merged_nhanes$age_group <- cut(merged_nhanes$RIDAGEYR, breaks = seq(10, 80, 10))
# Compute the mean systolic BP per age group using aggregate
avg_bp <- aggregate(BPXSY1 ~ age_group, data = merged_nhanes, FUN = function(x) mean(x, na.rm = TRUE))
ggplot(avg_bp, aes(x = age_group, y = avg_bp)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Average Systolic BP by Age Group",
x = "Age group",
y = "Average Systolic BP") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create age groups
merged_nhanes$age_group <- cut(merged_nhanes$RIDAGEYR, breaks = seq(10, 80, 10))
# Compute the mean systolic BP per age group using aggregate
avg_bp <- aggregate(BPXSY1 ~ age_group, data = merged_nhanes, FUN = function(x) mean(x, na.rm = TRUE))
ggplot(avg_bp, aes(x = age_group, y = BPXSY1)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Average Systolic BP by Age Group",
x = "Age group",
y = "Average Systolic BP") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
avg_bp$midpoint <- seq(15, 75, 10)  # midpoint of intervals
ggplot(avg_bp, aes(x = midpoint, y = BPXSY1)) +
geom_line() +
geom_point() +
labs(title = "Average Systolic BP by Age Group",
x = "Age (midpoint of group)",
y = "Average Systolic BP") +
theme_minimal()
forest_df <- merged_nhanes %>%
filter(!is.na(RIAGENDR) & !is.na(BPXSY1)) %>%
group_by(Gender = factor(RIAGENDR, labels = c("Male", "Female"))) %>%
summarise(
mean = mean(BPXSY1),
sd = sd(BPXSY1),
n = n(),
lower = mean - 1.96 * sd / sqrt(n),
upper = mean + 1.96 * sd / sqrt(n)
)
ggplot(forest_df, aes(x = mean, y = Gender)) +
geom_point(size = 3, color = "steelblue") +
geom_errorbarh(aes(xmin = lower, xmax = upper), height = 0.2, color = "steelblue") +
geom_vline(xintercept = 120, linetype = "dashed") +
labs(title = "Systolic Blood Pressure by Gender",
x = "Mean Systolic BP (95% CI)",
y = "") +
theme_minimal()
mosaicplot(table(merged_nhanes$RIAGENDR, merged_nhanes$SMQ020)[,c("Yes","No")],
main = "Smoking Status by Gender",
xlab = "Gender",
ylab = "Smoked at least 100 cigarettes?",
col = c("steelblue"))
avg_bp$midpoint <- seq(15, 75, 10)  # midpoint of intervals
ggplot(avg_bp, aes(x = midpoint, y = BPXSY1)) +
geom_line() +
geom_point() +
labs(title = "Average Systolic BP by Age Group",
x = "Age (midpoint of group)",
y = "Average Systolic BP") +
theme_minimal()
library(forestplot)
# Calculate summary statistics by gender
genders <- unique(merged_nhanes$RIAGENDR)
means <- numeric(length(genders))
sds <- numeric(length(genders))
ns <- numeric(length(genders))
lowers <- numeric(length(genders))
uppers <- numeric(length(genders))
gender_labels <- character(length(genders))
for (i in seq_along(genders)) {
group_data <- merged_nhanes$BPXSY1[merged_nhanes$RIAGENDR == genders[i]]
group_data <- group_data[!is.na(group_data)]
means[i] <- mean(group_data)
sds[i] <- sd(group_data)
ns[i] <- length(group_data)
lowers[i] <- means[i] - 1.96 * sds[i] / sqrt(ns[i])
uppers[i] <- means[i] + 1.96 * sds[i] / sqrt(ns[i])
gender_labels[i] <- genders
}
# Prepare the table text for the forest plot
tabletext <- cbind(
c("Gender", gender_labels),
c("Mean systolic BP", sprintf("%.1f", means))
)[-1, ]
# Create the forest plot
forestplot(labeltext = tabletext,
mean = means,
lower = lowers,
upper = uppers,
zero = 120,
xlog = FALSE,
boxsize = 0.2,
col = fpColors(box = "steelblue", line = "steelblue"),
title = "Systolic Blood Pressure by Gender")
# Remove rows with missing gender or BP
clean_data <- merged_nhanes[!is.na(merged_nhanes$RIAGENDR) & !is.na(merged_nhanes$BPXSY1), ]
# Assign factor labels for gender
clean_data$Gender <- factor(clean_data$RIAGENDR, labels = c("Male", "Female"))
# Get unique gender levels
genders <- levels(clean_data$Gender)
# Initialize vectors
means <- numeric(length(genders))
sds <- numeric(length(genders))
ns <- numeric(length(genders))
lowers <- numeric(length(genders))
uppers <- numeric(length(genders))
# Loop over gender groups to compute stats
for (i in seq_along(genders)) {
group_data <- clean_data$BPXSY1[clean_data$Gender == genders[i]]
means[i] <- mean(group_data)
sds[i] <- sd(group_data)
ns[i] <- length(group_data)
lowers[i] <- means[i] - 1.96 * sds[i] / sqrt(ns[i])
uppers[i] <- means[i] + 1.96 * sds[i] / sqrt(ns[i])
}
# Create result data frame
forest_df <- data.frame(
Gender = genders,
mean = means,
sd = sds,
n = ns,
lower = lowers,
upper = uppers
)
ggplot(forest_df, aes(x = mean, y = Gender)) +
geom_point(size = 3, color = "steelblue") +
geom_errorbarh(aes(xmin = lower, xmax = upper), height = 0.2, color = "steelblue") +
geom_vline(xintercept = 120, linetype = "dashed") +
labs(title = "Systolic Blood Pressure by Gender",
x = "Mean Systolic BP (95% CI)",
y = "") +
theme_minimal()
gender_counts <- merged_nhanes %>%
count(RIAGENDR) %>%
mutate(Gender = ifelse(RIAGENDR == "Male", "Male", "Female"),
prop = n / sum(n),
ypos = cumsum(prop) - 0.5*prop)
ggplot(gender_counts, aes(x = "", y = prop, fill = Gender)) +
geom_col(width = 1) +
coord_polar(theta = "y") +
geom_text(aes(y = ypos, label = scales::percent(prop)), color = "white") +
scale_fill_manual(values = c("salmon", "skyblue")) +
labs(title = "Gender Distribution") +
theme_void()
# Remove NAs from RIAGENDR
gender_data <- merged_nhanes[!is.na(merged_nhanes$RIAGENDR), ]
# Count gender
gender_counts_table <- table(gender_data$RIAGENDR)
# Convert to data frame
gender_counts <- as.data.frame(gender_counts_table)
colnames(gender_counts) <- c("RIAGENDR", "n")
# Assign gender labels
gender_counts$Gender <- ifelse(gender_counts$RIAGENDR == 1, "Male", "Female")
# Compute proportions
gender_counts$prop <- gender_counts$n / sum(gender_counts$n)
# Compute y positions for labels (center of each slice)
gender_counts$ypos <- cumsum(gender_counts$prop) - 0.5 * gender_counts$prop
ggplot(gender_counts, aes(x = "", y = prop, fill = Gender)) +
geom_col(width = 1) +
coord_polar(theta = "y") +
geom_text(aes(y = ypos, label = scales::percent(prop)), color = "white") +
scale_fill_manual(values = c("salmon", "skyblue")) +
labs(title = "Gender Distribution") +
theme_void()
# Remove NAs from RIAGENDR
gender_data <- merged_nhanes[!is.na(merged_nhanes$RIAGENDR), ]
# Count gender
gender_counts_table <- table(gender_data$RIAGENDR)
# Convert to data frame
gender_counts <- as.data.frame(gender_counts_table)
colnames(gender_counts) <- c("RIAGENDR", "n")
# Assign gender labels
gender_counts$Gender <- gender_counts$RIAGENDR
# Compute proportions
gender_counts$prop <- gender_counts$n / sum(gender_counts$n)
# Compute y positions for labels (center of each slice)
gender_counts$ypos <- cumsum(gender_counts$prop) - 0.5 * gender_counts$prop
ggplot(gender_counts, aes(x = "", y = prop, fill = Gender)) +
geom_col(width = 1) +
coord_polar(theta = "y") +
geom_text(aes(y = ypos, label = scales::percent(prop)), color = "white") +
scale_fill_manual(values = c("salmon", "skyblue")) +
labs(title = "Gender Distribution") +
theme_void()
