# Chunk 7
# Load the necessary CSV files into data frames
demo <- read.csv("/home/claire/Documents/GitHub/rforphysicians/data_sets/DEMO_G.csv") # Demographics (cycle G = 2011â€“2012)
bpx  <- read.csv("/home/claire/Documents/GitHub/rforphysicians/data_sets/BPX_G.csv") # Blood pressure
bmx  <- read.csv("/home/claire/Documents/GitHub/rforphysicians/data_sets/BMX_G.csv") # Body measures
smq  <- read.csv("/home/claire/Documents/GitHub/rforphysicians/data_sets/SMQ_G.csv") # Smoking questionnaire
# Chunk 9
# Once installed, a package has to be loaded to be used
library(tidyverse)
# Chunk 10
library(tidyverse)
# Let's do the same operation twice: once using the pipe, once without
# No pipe:
str(c(1,2,3,4))
# With pipe:
c(1,2,3,4) %>%
str()
# Not too exciting yet, but consider a more complex case:
summary(log(sqrt(na.omit(c(1, 4, NA, 16, 25)))))
# With the pipe, we can rewrite this more readably:
c(1, 4, NA, 16, 25) %>%
na.omit() %>%
sqrt() %>%
log() %>%
summary()
# Chunk 11
# Base R (no dplyr, no pipe)
cars$speed_group <- cut(cars$speed, breaks = c(0, 10, 20, 30),
labels = c("Low", "Medium", "High"))
avg_dist <- aggregate(dist ~ speed_group, data = cars, mean)
n_obs <- aggregate(dist ~ speed_group, data = cars, length)
names(n_obs)[2] <- "n"
summary_df <- merge(avg_dist, n_obs, by = "speed_group")
summary_df
# Chunk 12
# With dplyr, no pipe:
cars <- mutate(cars, speed_group = cut(speed, breaks = c(0, 10, 20, 30), labels = c("Low", "Medium", "High")))
summary_df <- summarise(group_by(cars, speed_group),
avg_dist = mean(dist),
n = n())
summary_df
# Chunk 13
# With dplyr and the pipe
cars %>%
mutate(speed_group = cut(speed, breaks = c(0, 10, 20, 30),
labels = c("Low", "Medium","High"))) %>%
group_by(speed_group) %>%
summarise(
avg_dist = mean(dist),
n = n()
)
# Chunk 14
knitr::include_graphics(path = "images/documentation.png")
# Chunk 15
# Look at the first respectively last few rows
head(demo)
tail(demo)
# Select columns by name
demo[, c("RIDAGEYR", "RIAGENDR")]  # Selecting age in years and gender
vars <- c("RIDAGEYR", "RIAGENDR")
demo[, vars]  # Alternative using variable `vars`
# Select elements by position
demo[1, 1]  # Access the first element of the first column (the respondent sequence number of the 1st participant)
ind_mat <- cbind(c(1, 3, 5), c(2, 4, 6))
demo[ind_mat]  # Access rows and columns using multiple indices
# Select rows based on a condition
head(demo[, "RIDAGEYR"] > 50)  # Logical condition for age greater than 50
head(!(demo[, "DMDHHSIZ"] > 3))  # Logical negation for total number of people in the household not greater than 3
demo[demo[, "RIDAGEYR"] > 50, ]  # Rows where age > 50
demo[demo[, "DMDHHSIZ"] < 3, ]  # Rows where total number of people in the household greater than 3
demo[demo[, "DMDHHSIZ"] >= 3, ]  # Rows where total number of people in the household greater or equal 3
# Combine logical vectors using "&" (AND), "|" (OR), and "!" (NOT)
demo[(demo[, "RIDAGEYR"] > 50 & demo[, "RIAGENDR"] == "Female"), ]  # Both conditions must be true
demo[(demo[, "DMDHHSIZ"] < 3 | demo[, "RIAGENDR"] == "Male"), ]  # One condition must be true
# Chunk 16
head(demo$RIDAGEYR)  # Returns the age column as a vector
# Chunk 17
head(demo[, "RIDAGEYR"])  # All rows in the age column
demo[1, ]  # Row 1 (all columns)
# Select columns
select(demo, RIDAGEYR, RIAGENDR)
# Filter rows based on a condition
filter(demo, RIDAGEYR > 50)
# Combine filtering and selecting
filter(demo, RIDAGEYR > 50 & RIAGENDR == "Female") %>%
select(RIDAGEYR, RIAGENDR)
help(ave)
demo %>%
summarise(mean_age = mean(RIDAGEYR, na.rm = TRUE),
median_hh_size = median(DMDHHSIZ, na.rm = TRUE))
demo %>%
summarise(sd_age = sd(RIDAGEYR, na.rm = TRUE),
min_age = min(DMDHRAGE, na.rm = TRUE),
max_age = max(DMDHRAGE, na.rm = TRUE))
help(count)
demo %>%
count(RIAGENDR)
demo %>%
count(AIALANGA) %>%
mutate(prop = n / sum(n))  # Proportional distribution
demo %>%
group_by(DMDHRMAR) %>%
summarise(mean_age = mean(DMDHRAGE, na.rm = TRUE))
demo %>%
group_by(DMDHRGND) %>%
summarise(median_household_size = median(DMDHHSIZ, na.rm = TRUE))
# Modify one entry:
demo_mod <- demo  # Create a copy to avoid modifying the original data set
demo_mod[1, 1:5]
demo_mod[1, "RIAGENDR"] <- 'Female' # Change gender of the first participant
demo_mod[1, 1:5]
# Modify multiple entries based on a condition:
demo_mod[1:10, 1:5]
demo_mod[!is.na(demo_mod$RIDAGEYR) & demo_mod$RIDAGEYR < 18, ]$RIDAGEYR <- 18  # Set minimum age to 18
demo_mod[1:10, 1:5]
demo_mod <- demo %>%
mutate(RIDAGEYR = case_when(
!is.na(RIDAGEYR) & RIDAGEYR < 18 ~ 18,
TRUE ~ RIDAGEYR  # leave other values unchanged
))
demo_mod <- demo %>%
mutate(RIDAGEYR = case_when(
!is.na(RIDAGEYR) & RIDAGEYR < 18 ~ 18,
TRUE ~ RIDAGEYR  # leave other values unchanged
))
demo_mod[1:10, 1:5]
demo_mod_dplyr <- demo %>%
mutate(RIDAGEYR = case_when(
!is.na(RIDAGEYR) & RIDAGEYR < 18 ~ 18,
TRUE ~ RIDAGEYR  # leave other values unchanged
))
demo_mod_dplyr[1:10, 1:5]
# Keep only rows where DMDHRMAR is not missing
demo_DMDHRMAR <- demo %>%
filter(!is.na(DMDHRMAR))
# Remove all rows with any missing values
demo_no_na <- demo %>%
filter(complete.cases(.))
# Extract one column from demo to create an additional data frame with the same structure (column names and types)
(new_participant <- demo[18,])
# Combine using rbind
extended_df <- rbind(demo, new_participant)
extended_df[nrow(extended_df),]
# Alternative with dplyr (bind_rows())
extended_df <- bind_rows(demo, new_participant)
extended_df %>%
slice(n())  # Show last row
# Inner join
inner_join_df <- demo %>%
inner_join(bmx, by = "SEQN")
# Left join
left_join_df <- demo %>%
left_join(bmx, by = "SEQN")
# Right join
right_join_df <- demo %>%
right_join(bmx, by = "SEQN")
# Full join
full_join_df <- demo %>%
full_join(bmx, by = "SEQN")
ls()
library(forestplot)
# Calculate summary statistics by gender
summary_stats <- merged_nhanes %>%
filter(!is.na(BPXSY1)) %>%                      # Remove NAs for BPXSY1
group_by(RIAGENDR) %>%                          # Group by gender
summarise(
mean = mean(BPXSY1),
sd = sd(BPXSY1),
n = n(),
lower = mean - 1.96 * sd / sqrt(n),
upper = mean + 1.96 * sd / sqrt(n)
) %>%
ungroup()
# Create the forest plot
forestplot(labeltext = c("Male","Female"),
mean = means,
lower = lowers,
upper = uppers,
zero = 120,
grid = TRUE,
ci.vertices = TRUE,
xlab = "Systolic BP (95% CI) [mmHg]",
col = fpColors(box = "steelblue", line = "steelblue"),
title = "Forest plot of systolic BP by gender")
# We define the age groups in which to calculate the mean systolic blood pressure and calculate the mean systolic blood pressure by age group
avg_bp <- merged_nhanes %>%
filter(!is.na(BPXSY1), !is.na(RIDAGEYR)) %>%             # Remove NAs
mutate(age_group = cut(RIDAGEYR, breaks = seq(10, 80, 10))) %>%  # Define age groups
group_by(age_group) %>%
summarise(mean_bp = mean(BPXSY1, na.rm = TRUE)) %>%
ungroup()
barplot(avg_bp,
xlab = "Age group [years]",
ylab = "Average systolic BP [mmHg]",
main = "Bar plot of average systolic BP by age group",
col = "steelblue")
# We define the age groups in which to calculate the mean systolic blood pressure and calculate the mean systolic blood pressure by age group
avg_bp <- merged_nhanes %>%
filter(!is.na(BPXSY1), !is.na(RIDAGEYR)) %>%             # Remove NAs
mutate(age_group = cut(RIDAGEYR, breaks = seq(10, 80, 10))) %>%  # Define age groups
group_by(age_group) %>%
summarise(mean_bp = mean(BPXSY1, na.rm = TRUE)) %>%
ungroup()
avg_bp
# We define the age groups in which to calculate the mean systolic blood pressure and calculate the mean systolic blood pressure by age group
avg_bp <- merged_nhanes %>%
filter(!is.na(BPXSY1), !is.na(RIDAGEYR)) %>%             # Remove NAs
mutate(age_group = cut(RIDAGEYR, breaks = seq(10, 80, 10))) %>%  # Define age groups
group_by(age_group) %>%
summarise(mean_bp = mean(BPXSY1, na.rm = TRUE)) %>%
ungroup()
barplot(height = avg_bp$mean_bp,
names.arg = avg_bp$age_group,
xlab = "Age group [years]",
ylab = "Average systolic BP [mmHg]",
main = "Bar plot of average systolic BP by age group",
col = "steelblue")
# We define the age groups in which to calculate the mean systolic blood pressure and calculate the mean systolic blood pressure by age group
avg_bp_df <- merged_nhanes %>%
filter(!is.na(BPXSY1), !is.na(RIDAGEYR)) %>%
mutate(age_group = cut(RIDAGEYR, breaks = seq(10, 80, 10))) %>%
group_by(age_group) %>%
summarise(mean_bp = mean(BPXSY1)) %>%
ungroup() %>%
mutate(
# Extract numeric midpoints from the age groups
age_mid = as.numeric(sub("\\((\\d+),.*", "\\1", age_group)) + 5
)
plot(avg_bp_df$age_mid, avg_bp_df$mean_bp, type = "b",
xlab = "Age (midpoint of group) [years]",
ylab = "Mean systolic BP [mmHg]",
main = "Mean systolic BP by age group",
col = "steelblue")
# We define the age groups in which to calculate the mean systolic blood pressure and calculate the mean systolic blood pressure by age group
avg_bp_df <- merged_nhanes %>%
filter(!is.na(BPXSY1), !is.na(RIDAGEYR)) %>%
mutate(age_group = cut(RIDAGEYR, breaks = seq(10, 80, 10))) %>%
group_by(age_group) %>%
summarise(mean_bp = mean(BPXSY1)) %>%
ungroup() %>%
mutate(
# Add midpoints
age_mid = seq(15, 75, 10)
)
plot(avg_bp_df$age_mid, avg_bp_df$mean_bp, type = "b",
xlab = "Age (midpoint of group) [years]",
ylab = "Mean systolic BP [mmHg]",
main = "Mean systolic BP by age group",
col = "steelblue")
# We define the age groups in which to calculate the mean systolic blood pressure and calculate the mean systolic blood pressure by age group
avg_bp <- merged_nhanes %>%
filter(!is.na(BPXSY1), !is.na(RIDAGEYR)) %>%             # Remove NAs
mutate(age_group = cut(RIDAGEYR, breaks = seq(10, 80, 10))) %>%  # Define age groups
group_by(age_group) %>%
summarise(mean_bp = mean(BPXSY1, na.rm = TRUE)) %>%
ungroup()
ggplot(avg_bp, aes(x = age_groups, y = BPXSY1)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Bar plot of mean systolic BP by age group",
x = "Age group [years]",
y = "Mean systolic BP [mmHg]") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
avg_bp
# We define the age groups in which to calculate the mean systolic blood pressure and calculate the mean systolic blood pressure by age group
avg_bp <- merged_nhanes %>%
filter(!is.na(BPXSY1), !is.na(RIDAGEYR)) %>%             # Remove NAs
mutate(age_group = cut(RIDAGEYR, breaks = seq(10, 80, 10))) %>%  # Define age groups
group_by(age_group) %>%
summarise(mean_bp = mean(BPXSY1, na.rm = TRUE)) %>%
ungroup()
ggplot(avg_bp, aes(x = age_groups, y = mean_bp)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Bar plot of mean systolic BP by age group",
x = "Age group [years]",
y = "Mean systolic BP [mmHg]") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# We define the age groups in which to calculate the mean systolic blood pressure and calculate the mean systolic blood pressure by age group
avg_bp <- merged_nhanes %>%
filter(!is.na(BPXSY1), !is.na(RIDAGEYR)) %>%             # Remove NAs
mutate(age_group = cut(RIDAGEYR, breaks = seq(10, 80, 10))) %>%  # Define age groups
group_by(age_group) %>%
summarise(mean_bp = mean(BPXSY1, na.rm = TRUE)) %>%
ungroup()
ggplot(avg_bp, aes(x = age_group, y = mean_bp)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Bar plot of mean systolic BP by age group",
x = "Age group [years]",
y = "Mean systolic BP [mmHg]") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
avg_bp$midpoint <- seq(15, 75, 10)  # midpoint of intervals
ggplot(avg_bp, aes(x = midpoint, y = BPXSY1)) +
geom_line(col = "steelblue") +
geom_point(col = "steelblue") +
labs(title = "Mean systolic BP by age group",
x = "Age (midpoint of group) [years]",
y = "Mean systolic BP [mmHg]") +
theme_minimal()
avg_bp
ggplot(avg_bp, aes(x = midpoint, y = mean_bp)) +
geom_line(col = "steelblue") +
geom_point(col = "steelblue") +
labs(title = "Mean systolic BP by age group",
x = "Age (midpoint of group) [years]",
y = "Mean systolic BP [mmHg]") +
theme_minimal()
# Count proportions for each gender
gender_counts <- merged_nhanes %>%
filter(!is.na(RIAGENDR)) %>%                     # Remove NAs if any
count(Gender = RIAGENDR) %>%                      # Count by gender, rename column to 'Gender'
mutate(
prop = n / sum(n),                              # Compute proportion
ypos = cumsum(prop) - 0.5 * prop                # Compute y position for label
)
ggplot(gender_counts, aes(x = "", y = prop, fill = Gender)) +
geom_col(width = 1) +
coord_polar(theta = "y") +
geom_text(aes(y = ypos, label = scales::percent(prop)), color = "white") +
scale_fill_manual(values = c("salmon", "skyblue")) +
labs(title = "Pie chart of gender distribution") +
theme_void()
# Calculate summary statistics by gender
forest_df <- merged_nhanes %>%
filter(!is.na(BPXSY1), !is.na(RIAGENDR)) %>%
group_by(Gender = RIAGENDR) %>%
summarise(
mean = mean(BPXSY1),
sd = sd(BPXSY1),
n = n(),
lower = mean - 1.96 * sd / sqrt(n),
upper = mean + 1.96 * sd / sqrt(n),
.groups = "drop"
)
ggplot(forest_df, aes(x = mean, y = Gender)) +
geom_point(size = 3, color = "steelblue") +
geom_errorbarh(aes(xmin = lower, xmax = upper), height = 0.2, color = "steelblue") +
geom_vline(xintercept = 120, linetype = "dashed") +
labs(title = "Forest plot of systolic BP by gender",
x = "Systolic BP (95% CI) [mmHg]",
y = "") +
theme_minimal()
# Load the necessary CSV files into data frames
directory <- "/home/claire/Documents/GitHub/rforphysicians/data_sets/" # Use your own working directory here
demo <- read.csv(paste0(directory,"DEMO_G.csv")) # Demographics (cycle G = 2011â€“2012)
bpx  <- read.csv(paste0(directory,"BPX_G.csv")) # Blood pressure
bmx  <- read.csv(paste0(directory,"BMX_G.csv")) # Body measures
smq  <- read.csv(paste0(directory,"SMQ_G.csv")) # Smoking questionnaire
library(forestplot)
# Calculate summary statistics by gender
summary_stats <- merged_nhanes %>%
filter(!is.na(BPXSY1)) %>%                      # Remove NAs for BPXSY1
group_by(RIAGENDR) %>%                          # Group by gender
summarise(
mean = mean(BPXSY1),
sd = sd(BPXSY1),
n = n(),
lower = mean - 1.96 * sd / sqrt(n),
upper = mean + 1.96 * sd / sqrt(n)
) %>%
ungroup()
# Create the forest plot
forestplot(labeltext = c("Male","Female"),
mean = mean,
lower = lowers,
upper = uppers,
zero = 120,
grid = TRUE,
ci.vertices = TRUE,
xlab = "Systolic BP (95% CI) [mmHg]",
col = fpColors(box = "steelblue", line = "steelblue"),
title = "Forest plot of systolic BP by gender")
library(forestplot)
# Calculate summary statistics by gender
summary_stats <- merged_nhanes %>%
filter(!is.na(BPXSY1)) %>%                      # Remove NAs for BPXSY1
group_by(RIAGENDR) %>%                          # Group by gender
summarise(
mean = mean(BPXSY1),
sd = sd(BPXSY1),
n = n(),
lower = mean - 1.96 * sd / sqrt(n),
upper = mean + 1.96 * sd / sqrt(n)
) %>%
ungroup()
# Create the forest plot
forestplot(labeltext = c("Male","Female"),
mean = mean,
lower = lowers,
upper = uppers,
zero = 120,
grid = TRUE,
ci.vertices = TRUE,
xlab = "Systolic BP (95% CI) [mmHg]",
col = fpColors(box = "steelblue", line = "steelblue"),
title = "Forest plot of systolic BP by gender")
summary_stats
# Create the forest plot
forestplot(labeltext = c("Male","Female"),
mean = mean,
lower = lowers,
upper = uppers,
zero = 120,
grid = TRUE,
ci.vertices = TRUE,
xlab = "Systolic BP (95% CI) [mmHg]",
col = fpColors(box = "steelblue", line = "steelblue"),
title = "Forest plot of systolic BP by gender")
library(forestplot)
# Calculate summary statistics by gender
summary_stats <- merged_nhanes %>%
filter(!is.na(BPXSY1)) %>%                      # Remove NAs for BPXSY1
group_by(RIAGENDR) %>%                          # Group by gender
summarise(
mean = mean(BPXSY1),
sd = sd(BPXSY1),
n = n(),
lower = mean - 1.96 * sd / sqrt(n),
upper = mean + 1.96 * sd / sqrt(n)
) %>%
ungroup()
# Create the forest plot
forestplot(labeltext = c("Male","Female"),
mean = mean,
lower = lower,
upper = upper,
zero = 120,
grid = TRUE,
ci.vertices = TRUE,
xlab = "Systolic BP (95% CI) [mmHg]",
col = fpColors(box = "steelblue", line = "steelblue"),
title = "Forest plot of systolic BP by gender")
library(forestplot)
# Calculate summary statistics by gender
summary_stats <- merged_nhanes %>%
filter(!is.na(BPXSY1)) %>%                      # Remove NAs for BPXSY1
group_by(RIAGENDR) %>%                          # Group by gender
summarise(
mean = mean(BPXSY1),
sd = sd(BPXSY1),
n = n(),
lower = mean - 1.96 * sd / sqrt(n),
upper = mean + 1.96 * sd / sqrt(n)
) %>%
ungroup()
# Create the forest plot
forestplot(labeltext = c("Male","Female"),
mean = summary_stats$mean,
lower = summary_stats$lower,
upper = summary_stats$upper,
zero = 120,
grid = TRUE,
ci.vertices = TRUE,
xlab = "Systolic BP (95% CI) [mmHg]",
col = fpColors(box = "steelblue", line = "steelblue"),
title = "Forest plot of systolic BP by gender")
library(forestplot)
# Calculate summary statistics by gender
summary_stats <- merged_nhanes %>%
filter(!is.na(BPXSY1)) %>%                      # Remove NAs for BPXSY1
group_by(RIAGENDR) %>%                          # Group by gender
summarise(
mean = mean(BPXSY1),
sd = sd(BPXSY1),
n = n(),
lower = mean - 1.96 * sd / sqrt(n),
upper = mean + 1.96 * sd / sqrt(n)
) %>%
ungroup()
# Create the forest plot
forestplot(labeltext = c("Female","Male"),
mean = summary_stats$mean,
lower = summary_stats$lower,
upper = summary_stats$upper,
zero = 120,
grid = TRUE,
ci.vertices = TRUE,
xlab = "Systolic BP (95% CI) [mmHg]",
col = fpColors(box = "steelblue", line = "steelblue"),
title = "Forest plot of systolic BP by gender")
ggplot(avg_bp, aes(x = midpoint, y = mean_bp)) +
geom_line(col = "steelblue") +
geom_point(col = "steelblue") +
labs(title = "Mean systolic BP by age group",
x = "Age (midpoint of group) [years]",
y = "Mean systolic BP [mmHg]") +
theme_minimal()
# We define the age groups in which to calculate the mean systolic blood pressure and calculate the mean systolic blood pressure by age group
avg_bp_with_midpoints <- merged_nhanes %>%
filter(!is.na(BPXSY1), !is.na(RIDAGEYR)) %>%
mutate(age_group = cut(RIDAGEYR, breaks = seq(10, 80, 10))) %>%
group_by(age_group) %>%
summarise(mean_bp = mean(BPXSY1)) %>%
ungroup() %>%
mutate(
# Add midpoints
age_mid = seq(15, 75, 10)
)
plot(avg_bp_with_midpoints$age_mid, avg_bp_with_midpoints$mean_bp, type = "b",
xlab = "Age (midpoint of group) [years]",
ylab = "Mean systolic BP [mmHg]",
main = "Mean systolic BP by age group",
col = "steelblue")
ggplot(avg_bp, aes(x = age_group, y = mean_bp)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Bar plot of mean systolic BP by age group",
x = "Age group [years]",
y = "Mean systolic BP [mmHg]") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
avg_bp_with_midpoints
