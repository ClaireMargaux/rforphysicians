(d <- data.frame(id = 1:5,
val = c(4,5,2,6,5),
group = sample(c("exp","control"), size = 5, replace = TRUE)))
# Display the structure of the data frame
str(d)
# Example data frame
df <- data.frame(
ID = 1:5,
Name = c("Anna", "Ben", "Carla", "David", "Eva"),
Age = c(23, 31, 29, 40, 35)
)
# Example matrix
data <- matrix(1:12, nrow = 3, ncol = 4)
colnames(data) <- c("Q1", "Q2", "Q3", "Q4")
rownames(data) <- c("A", "B", "C")
# Example data frame
df <- data.frame(
ID = 1:5,
Name = c("Anna", "Ben", "Carla", "David", "Eva"),
Age = c(23, 31, 29, 40, 35)
)
# General object inspection
typeof(df)          # Returns the internal storage type of the object
str(df)             # Gives a compact, human-readable summary of the object's structure
attributes(df)      # Lists the object's attributes (e.g., names, dimensions, class)
str(attributes(df)) # Displays the structure of the attributes
# Functions especially useful for matrices or data frames
nrow(df)          # Number of rows
ncol(df)          # Number of columns
dim(df)           # Dimensions (rows, columns)
colnames(df)      # Column names
rownames(df)      # Row names
str(rownames(df)) # Structure of the row names (e.g., character vector)
# Example data frame
df <- data.frame(
ID = 1:5,
Name = c("Anna", "Ben", "Carla", "David", "Eva"),
Age = c(23, 31, 29, 40, 35)
)
# General object inspection
typeof(df)          # Returns the internal storage type of the object
str(df)             # Gives a compact, human-readable summary of the object's structure
attributes(df)      # Lists the object's attributes (e.g., names, dimensions, class)
str(attributes(df)) # Displays the structure of the attributes
# Functions especially useful for matrices or data frames
nrow(df)          # Number of rows
ncol(df)          # Number of columns
dim(df)           # Dimensions (rows, columns)
colnames(df)      # Column names
rownames(df)      # Row names
str(rownames(df)) # Structure of the row names (e.g., character vector)
# Functions especially useful for matrices or data frames
nrow(df)          # Number of rows
ncol(df)          # Number of columns
dim(df)           # Dimensions (rows, columns)
colnames(df)      # Column names
rownames(df)      # Row names
str(colnames(df)) # Structure of the column names (e.g., character vector)
str(rownames(df)) # Structure of the row names (e.g., character vector)
# General object inspection
typeof(df)          # Returns the internal storage type of the object
str(df)             # Gives a compact, human-readable summary of the object's structure
attributes(df)      # Lists the object's attributes (e.g., names, dimensions, class)
str(attributes(df)) # Displays the structure of the attributes
typeof(3.14)
str(3.14)
typeof(2L)
typeof(3.14)
str(3.14)
typeof(2L)
typeof(2L)
str(2L)
typeof(TRUE)
str(TRUE)
# Example: Logical operation
values <- 1:10
above_five <- (values > 5)
above_five
typeof("hello")
str("hello")
typeof(1 + 2i)
str(1 + 2i)
z <- c(1:3,NA)
print(z)
is.na(z)
z
vec1 <- c(1,2,3)
str(vec1)
# Alternative ways of creating vectors:
vec2 <- 1:3  # Sequence of integers
vec3 <- seq(1, 3, by=1)  # More general sequence
# Accessing elements of the vector by index (R uses 1-based indexing)
vec1[1]  # First element
vec2[c(2, 3)]  # Elements at indices 2 and 3
vec3[c(-2)]  # All elements except for the element at index 2
(mat <- matrix(c(1,2,3,4), nrow = 2, ncol = 2))
str(mat)
# Accessing elements of the vector by index (R uses 1-based indexing)
vec1[1]  # First element
vec2[c(2, 3)]  # Elements at indices 2 and 3
vec3[c(-2)]  # All elements except for the element at index 2
vec1 <- c(1,2,3)
str(vec1)
(array <- array(1:8, c(2,4,2)))
str(array)
(list <- list(numb = 10:15, char = 'hello'))
str(list)
(fac <- factor(c("single", "married")))
str(fac)
(d <- data.frame(id = 1:5,
val = c(4,5,2,6,5),
group = sample(c("exp","control"), size = 5, replace = TRUE)))
str(d)
frac <- function(numerator, denominator) {
result <- numerator / denominator
return(result)
}
frac(6, 2)  # Calling the function
# Example
sum_squared(2,3)
# The output should be:
13
getwd()                       # Displays the current working directory
setwd("path/to/your/folder")  # Sets the working directory
# Create the data frame
df <- data.frame(id = 1:10,
blood_pressure = rnorm(10, mean = 123, sd = 8),
group = factor(sample(c("drug 1", "drug 2", "obs arm"), 10, replace = TRUE)))
# View the data
df
# Compute z-scores for blood pressure
df$z_score <- scale(df$blood_pressure)
# View updated data
df
# Create the data frame
df <- data.frame(id = 1:10,
blood_pressure = rnorm(10, mean = 123, sd = 8),
group = factor(sample(c("drug 1", "drug 2", "obs arm"), 10, replace = TRUE)))
# View the data
df
# Compute z-scores for blood pressure
df$stand_score <- scale(df$blood_pressure)
# View updated data
df
# Create the data frame
(df <- data.frame(id = 1:10,
blood_pressure = rnorm(10, mean = 123, sd = 8),
group = factor(sample(c("drug 1", "drug 2", "obs arm"), 10, replace = TRUE))))
# Compute z-scores for blood pressure
(df$stand_score <- scale(df$blood_pressure))
# Create the data frame
(df <- data.frame(id = 1:10,
blood_pressure = rnorm(10, mean = 123, sd = 8),
group = factor(sample(c("drug 1", "drug 2", "obs arm"), 10, replace = TRUE))))
# Compute standardized scores for blood pressure
df$stand_score <- scale(df$blood_pressure)
# Alternatively
df$stand_score_2 <- (df$blood_pressure - mean(df$blood_pressure))/sd(df$blood_pressure)
df
summary(HealthCare_Dataset)
HealthCare_Dataset <- read.csv("HealthCare_Dataset.csv")
setwd("~/Documents/GitHub/rforphysicians/docs")
HealthCare_Dataset <- read.csv("HealthCare_Dataset.csv")
class(HealthCare_Dataset) # we check that we are dealing with a data frame
head(HealthCare_Dataset) # head() returns the first parts of an object
# Let us only look at the first 10 entries of the variable Blood_Pressure
HealthCare_Dataset$Blood_Pressure[1:10]
HealthCare_Dataset <- read.csv("HealthCare_Dataset.csv")
class(HealthCare_Dataset) # we check that we are dealing with a data frame
head(HealthCare_Dataset) # head() returns the first parts of an object
HealthCare_Dataset <- read.csv("HealthCare_Dataset.csv")
str(HealthCare_Dataset) # we check that we are dealing with a data frame
head(HealthCare_Dataset) # head() returns the first parts of an object
HealthCare_Dataset <- read.csv("HealthCare_Dataset.csv")
class(HealthCare_Dataset) # we check that we are dealing with a data frame
head(HealthCare_Dataset) # head() returns the first parts of an object
# Select by name
HealthCare_Dataset[, c("Age", "Blood_Pressure")]  # Selecting Age and Blood_Pressure columns
vars <- c("Age", "Blood_Pressure")
HealthCare_Dataset[, vars]  # Alternative using variable `vars`
# Select by position (with 2 x m index matrix)
ind_mat <- cbind(c(1, 3, 5), c(2, 4, 6))
# Select by name
HealthCare_Dataset[, c("Age", "Blood_Pressure")]  # Selecting Age and Blood_Pressure columns
# Select by condition (logical vectors)
HealthCare_Dataset[, "Blood_Pressure"] > 120  # Logical condition for Blood_Pressure greater than 120
HealthCare_Dataset[HealthCare_Dataset[, "Blood_Pressure"] > 120, ]  # Rows where Blood_Pressure > 120
# Select by name
HealthCare_Dataset[, c("Age", "Blood_Pressure")]  # Selecting Age and Blood_Pressure columns
vars <- c("Age", "Blood_Pressure")
HealthCare_Dataset[, vars]  # Alternative using variable `vars`
# Select by position (with 2 x m index matrix)
ind_mat <- cbind(c(1, 3, 5), c(2, 4, 6))
HealthCare_Dataset[ind_mat]  # Access rows and columns using indices
# Select by condition (logical vectors)
HealthCare_Dataset[, "Blood_Pressure"] > 120  # Logical condition for Blood_Pressure greater than 120
HealthCare_Dataset[HealthCare_Dataset[, "Blood_Pressure"] > 120, ]  # Rows where Blood_Pressure > 120
HealthCare_Dataset[, "Age"] > 50  # Age greater than 50
!(HealthCare_Dataset[, "Age"] > 50)  # Negation: Age not greater than 50
# Combining logical vectors: "&" (AND), "|" (OR); negation: "!" (NOT)
HealthCare_Dataset[(HealthCare_Dataset[, "Age"] > 50 & HealthCare_Dataset[, "Blood_Pressure"] > 120), ]  # Both conditions must be true
HealthCare_Dataset[(HealthCare_Dataset[, "Age"] > 50 | HealthCare_Dataset[, "Blood_Pressure"] > 120), ]  # One condition must be true
HealthCare_Dataset[, "Age"]  # All rows in the Age column
HealthCare_Dataset[1, ]  # Row 1 (all columns)
HealthCare_Dataset$Age  # Returns the Age column as a vector
# Select columns by name
HealthCare_Dataset[, c("Age", "Blood_Pressure")]  # Selecting Age and Blood_Pressure columns
vars <- c("Age", "Blood_Pressure")
HealthCare_Dataset[, vars]  # Alternative using variable `vars`
# Select elements by position
HealthCare_Dataset[1,1] # Access the first element of the first column
ind_mat <- cbind(c(1, 3, 5), c(2, 4, 6))
HealthCare_Dataset[ind_mat]  # Access rows and columns using multiple indices
# Select by condition (logical vectors)
HealthCare_Dataset[, "Blood_Pressure"] > 120  # Logical condition for Blood_Pressure greater than 120
HealthCare_Dataset[HealthCare_Dataset[, "Blood_Pressure"] > 120, ]  # Rows where Blood_Pressure > 120
HealthCare_Dataset[, "Age"] > 50  # Age greater than 50
!(HealthCare_Dataset[, "Age"] > 50)  # Negation: Age not greater than 50
# Combining logical vectors: "&" (AND), "|" (OR); negation: "!" (NOT)
HealthCare_Dataset[(HealthCare_Dataset[, "Age"] > 50 & HealthCare_Dataset[, "Blood_Pressure"] > 120), ]  # Both conditions must be true
HealthCare_Dataset[(HealthCare_Dataset[, "Age"] > 50 | HealthCare_Dataset[, "Blood_Pressure"] > 120), ]  # One condition must be true
ind_mat <- cbind(c(1, 3, 5), c(2, 4, 6))
HealthCare_Dataset[ind_mat]  # Access rows and columns using multiple indices
install.packages("nhanesA")
library(nhanesA)
install.packages("nhanesA")
library(nhanesA)
install.packages("NHANES")
library('nhahesA')
library('nhanesA')
library('nhanes')
library(nhanesA)
nhanesTables('EXAM', 2005)
install.packages('nhanesA')
library(nhanesA)
install.packages("stringi", type = "source")
# Create a new data frame with the same structure (column names and types)
new_patients <- data.frame(
Patient_ID = c(7, 8),
Age = c(40, 58),
Gender = c("Female", "Male"),
Blood_Pressure = c(110.3, 128.6),
Heart_Rate = c(72.5, 76.1),
Temperature = c(98.7, 99.1),
Diagnosis = c("Cancer", "Influenza"),
Medication = c("Chemotherapy", "Statins"),
Treatment_Duration = c(18, 20),
Insurance_Type = c("Private", "Uninsured"),
Doctor_Name = c("Dr. Lee", "Dr. Wang"),
Hospital_Name = c("Children's Hospital", "Healthcare Clinic"),
Lab_Test_Results = c(110.4, 87.9),
X.ray_Results = c("Normal", "Abnormal"),
Surgery_Type = c("Angioplasty", "Appendectomy"),
Recovery_Time = c(6, 8),
Allergies = c("None", "Latex"),
Family_History = c("Hypertension", "Cancer"),
Patient_Satisfaction = c(3, 4)
)
# Combine using rbind
extended_df <- rbind(HealthCare_Dataset, new_patients)
tail(extended_df)
install.packages('nhanesA')
library(nhanesA)
nhanesTables('EXAM', 2005)
bmx_d  <- nhanes('BMX_D')
View(bmx_d)
demo <- nhanes("DEMO_G")   # Demographics (cycle G = 2011–2012)
bpx  <- nhanes("BPX_G")    # Blood pressure
bmx  <- nhanes("BMX_G")    # Body measures
smq  <- nhanes("SMQ_G")    # Smoking questionnaire
View(demo)
# Save data frames as CSV files
write.csv(demo, "DEMO_G.csv", row.names = FALSE)
write.csv(bpx, "BPX_G.csv", row.names = FALSE)
write.csv(bmx, "BMX_G.csv", row.names = FALSE)
write.csv(smq, "SMQ_G.csv", row.names = FALSE)
# Save data frames as CSV files
# Save data frames as CSV files to the specified directory
write.csv(demo, "/home/claire/Documents/GitHub/rforphysicians/data_sets/DEMO_G.csv", row.names = FALSE)
write.csv(bpx, "/home/claire/Documents/GitHub/rforphysicians/data_sets/BPX_G.csv", row.names = FALSE)
write.csv(bmx, "/home/claire/Documents/GitHub/rforphysicians/data_sets/BMX_G.csv", row.names = FALSE)
write.csv(smq, "/home/claire/Documents/GitHub/rforphysicians/data_sets/SMQ_G.csv", row.names = FALSE)
# Load the necessary CSV files into data frames
demo <- read.csv("/home/claire/Documents/GitHub/rforphysicians/data_sets/DEMO_G.csv") # Demographics (cycle G = 2011–2012)
bpx  <- read.csv("/home/claire/Documents/GitHub/rforphysicians/data_sets/BPX_G.csv") # Blood pressure
bmx  <- read.csv("/home/claire/Documents/GitHub/rforphysicians/data_sets/BMX_G.csv") # Body measures
smq  <- read.csv("/home/claire/Documents/GitHub/rforphysicians/data_sets/SMQ_G.csv") # Smoking questionnaire
# Check the class of the data frame to confirm it is a data frame
class(demo)
class(bpx)
class(bmx)
class(smq)
# Preview the first few rows of each data frame to confirm the data structure
head(demo)
head(bpx)
head(bmx)
head(smq)
# Preview the first few rows of each data frame to confirm the data structure
str(demo)
# Load the necessary CSV files into data frames
demo <- read.csv("/home/claire/Documents/GitHub/rforphysicians/data_sets/DEMO_G.csv") # Demographics (cycle G = 2011–2012)
bpx  <- read.csv("/home/claire/Documents/GitHub/rforphysicians/data_sets/BPX_G.csv") # Blood pressure
bmx  <- read.csv("/home/claire/Documents/GitHub/rforphysicians/data_sets/BMX_G.csv") # Body measures
smq  <- read.csv("/home/claire/Documents/GitHub/rforphysicians/data_sets/SMQ_G.csv") # Smoking questionnaire
# Check the structure of the data frames
str(demo)
str(bpx)
str(bmx)
str(smq)
# Load the necessary CSV files into data frames
demo <- read.csv("/home/claire/Documents/GitHub/rforphysicians/data_sets/DEMO_G.csv") # Demographics (cycle G = 2011–2012)
bpx  <- read.csv("/home/claire/Documents/GitHub/rforphysicians/data_sets/BPX_G.csv") # Blood pressure
bmx  <- read.csv("/home/claire/Documents/GitHub/rforphysicians/data_sets/BMX_G.csv") # Body measures
smq  <- read.csv("/home/claire/Documents/GitHub/rforphysicians/data_sets/SMQ_G.csv") # Smoking questionnaire
# Check the structure of the data frames
str(demo)
str(bpx)
str(bmx)
str(smq)
View(demo)
View(bmx)
nhanesCodebook('DEMO_G', 'RIAGENDR')
nhanesCodebook('DEMO_G',)
str(demo)
# Select columns by name
demo[, c("RIDAGEYR", "RIAGENDR")]  # Selecting age in years and gender
vars <- c("RIDAGEYR", "RIAGENDR")
demo[, vars]  # Alternative using variable `vars`
# Select elements by position
demo[1, 1]  # Access the first element of the first column
View(demo)
nhanesCodebook('DEMO_G','SEQN')
# Select rows based on a condition
demo[, "RIDAGEYR"] > 50  # Logical condition for age greater than 50
demo[demo[, "RIDAGEYR"] > 50, ]  # Rows where age > 50
!(demo[, "RIDAGEYR"] > 50)  # Negation: age not greater than 50
# Combine logical vectors using "&" (AND), "|" (OR), and "!" (NOT)
demo[(demo[, "RIDAGEYR"] > 50 & demo[, "RIAGENDR"] == "Female"), ]  # Both conditions must be true
demo[(demo[, "RIDAGEYR"] > 50 | demo[, "RIAGENDR"] == "Female"), ]  # One condition must be true
nhanesCodebook('DEMO_G','SDMVPSU')
nhanesCodebook('DEMO_G','DMDHHSIZ')
demo[demo[, "DMDHHSIZ"] < 3, ]  # Rows where total number of people in the Household < 3
!(demo[, "RIDAGEYR"] > 50)  # Logical negation for total number of people in the Household not > 2
# Combine logical vectors using "&" (AND), "|" (OR), and "!" (NOT)
demo[(demo[, "RIDAGEYR"] > 50 & demo[, "RIAGENDR"] == "Female"), ]  # Both conditions must be true
demo[(demo[, "DMDHHSIZ"] < 3 | demo[, "RIAGENDR"] == "Male"), ]  # One condition must be true
demo[1, ]  # Row 1 (all columns)
demo[, "RIDAGEYR"] > 50
demo[demo[, "DMDHHSIZ"] ! 3, ]  # Rows where total number of people in the Household < 3
demo[demo[, "DMDHHSIZ"] !< 3, ]  # Rows where total number of people in the Household < 3
# Select columns by name
demo[, c("RIDAGEYR", "RIAGENDR")]  # Selecting age in years and gender
vars <- c("RIDAGEYR", "RIAGENDR")
demo[, vars]  # Alternative using variable `vars`
# Select elements by position
demo[1, 1]  # Access the first element of the first column (the respondent sequence number of the 1st participant)
ind_mat <- cbind(c(1, 3, 5), c(2, 4, 6))
demo[ind_mat]  # Access rows and columns using multiple indices
# Select rows based on a condition
demo[, "RIDAGEYR"] > 50  # Logical condition for age greater than 50
!(demo[, "DMDHHSIZ"] > 3)  # Logical negation for total number of people in the household not greater than 3
demo[demo[, "RIDAGEYR"] > 50, ]  # Rows where age > 50
demo[demo[, "DMDHHSIZ"] < 3, ]  # Rows where total number of people in the household greater than 3
demo[demo[, "DMDHHSIZ"] => 3, ]  # Rows where total number of people in the household greater or equal 3
demo[demo[, "DMDHHSIZ"] >= 3, ]  # Rows where total number of people in the household greater or equal 3
nhanesCodebook('DEMO_G','DMDHHSIZ')
mean(demo$RIDAGEYR, na.rm = TRUE)                 # Average (mean) age of participants
median(demo$DMDHHSIZ, na.rm = TRUE)               # Median household size
nhanesCodebook('DEMO_G','DMDHSZA')
nhanesCodebook('DEMO_G','DMDHHSZA')
nhanesCodebook('DEMO_G','DMDHRAGE')
nhanesCodebook('DEMO_G','DMDHRMAR')
nhanesCodebook('DEMO_G','WTMEC2YR')
nhanesCodebook('DEMO_G','AIALANGA')
nhanesCodebook('DEMO_G','RIDEXAGM')
nhanesCodebook('DEMO_G','RIDAGEYR')
sd(demo$RIDAGEYR, na.rm = TRUE)                     # Standard deviation of age
range(demo$DMDHHSZA, na.rm = TRUE)                  # Range of number of young children
min(demo$DMDHRAGE, na.rm = TRUE)                    # Minimum age of household reference person
max(demo$DMDHRAGE, na.rm = TRUE)                    # Maximum age of household reference person
table(demo$RIAGENDR)                                # Gender distribution
table(demo$DMDHRMAR)                                # Marital status of household reference person
table(demo$AIALANGA)                                # Language of ACASI interview
prop.table(table(demo$AIALANGA))                    # Proportional distribution of interview languages
aggregate(DMDHRAGE ~ DMDHRMAR, data = demo, FUN = mean, na.rm = TRUE)   # Mean age of household ref by marital status
aggregate(DMDHHSZA ~ RIAGENDR, data = demo, FUN = median, na.rm = TRUE) # Median # of young children by gender
nhanesCodebook('DEMO_G','RIAGENDR')
nhanesCodebook('DEMO_G','DMDHRGND')
aggregate(DMDHRAGE ~ DMDHRMAR, data = demo, FUN = mean, na.rm = TRUE)   # Mean age of household reference person by marital status
aggregate(DMDHHSIZ ~ DMDHRGND, data = demo, FUN = median, na.rm = TRUE) # Median household size by gender of reference person
summary(demo)
nhanesCodebook('DEMO_G','DMDHRGND')
# Modify one entry:
demo_mod <- demo  # Create a copy to avoid modifying the original data set
demo_mod[1, ]
demo_mod[1, 1:5]
demo_mod[1, "RIAGENDR"] <- 'Female' # Change gender of the first participant
demo_mod[1, 1:5]
# Modify multiple entries based on a condition:
demo_mod[1:10, 1:5]
demo_mod[!is.na(demo_mod$RIDAGEYR) & demo_mod$RIDAGEYR < 18, ]$RIDAGEYR <- 18  # Set minimum age to 18
demo_mod[1:10, 1:5]
demo$AIALANGA
# Filter the dataset to include only female patients that are above 18 years old and that took the interview in Spanish.
demo_filtered <- demo[demo$RIAGENDR == 'Female' & demo$RIDAGEYR > 17 & demo$AIALANGA == 'Spanish', ]
head(demo_filtered)
ind <- c('RIAGENDR', 'RIDAGEYR', 'AIALANGA')
demo_filtered[, ind]
View(demo_filtered)
str(demo)
# Filter the dataset to include only female patients that are above 18 years old and that took the interview in Spanish.
demo_filtered <- demo[demo$RIAGENDR == "Female" &
demo$RIDAGEYR > 17 &
demo$AIALANGA == "Spanish", ]
View(demo_filtered)
# Filter the dataset to include only female patients that are above 18 years old and that took the interview in Spanish.
demo_filtered <- demo[!is.na(demo$RIAGENDR) & demo$RIAGENDR == "Female" &
demo$RIDAGEYR > 17 &
!is.na(demo$AIALANGA) & demo$AIALANGA == "Spanish", ]
ind <- c('RIAGENDR', 'RIDAGEYR', 'AIALANGA')
demo_filtered[, ind]
# Filter the dataset to include only female patients that are above 18 years old and that took the interview in Spanish.
demo_filtered <- demo[demo$RIAGENDR == "Female" &
demo$RIDAGEYR > 17 &
!is.na(demo$AIALANGA) & demo$AIALANGA == "Spanish", ]
ind <- c('RIAGENDR', 'RIDAGEYR', 'AIALANGA')
demo_filtered[, ind]
# View the first few rows of the dataset
head(demo)
# Display the names of all columns
names(demo)
# View all unique values in the "AIALANGA" (Interview Language) column
unique(demo$AIALANGA)
# Count how many men and women are in the dataset
table(demo$RIAGENDR)
# Get a quick statistical summary of numeric columns
summary(demo)
# View the number of missing values in each column
colSums(is.na(demo))
# Calculate the average age
mean(demo$RIDAGEYR, na.rm = TRUE)
View(bmx)
View(demo)
# Look at the first resp. last few rows of the data set
head(demo)
tail(demo)
# Create an additional data frame with the same number of rows
extra_info <- data.frame(
NA_column = rep(NA, nrow(demo))  # Example of an additional column with NA values
)
# Combine using cbind
combined_df <- cbind(demo, extra_info)
combined_df[1, ]
colnames(demo)
# Extract one column from demo to create an additional data frame with the same number of rows
extra_info <- demo$RIDRETH1
# Combine using cbind
combined_df <- cbind(demo, extra_info)
combined_df[1, ]
nhanesCodebook('demo_G', 'RIDRETH1')
# Extract one column from demo to create an additional data frame with the same structure (column names and types)
new_participants <- demo[18,]
# Extract one column from demo to create an additional data frame with the same structure (column names and types)
new_participant <- demo[18,]
combined_df[1, ]
# Extract one column from demo to create an additional data frame with the same structure (column names and types)
(new_participant <- demo[18,])
extended_df[length(demo),]
length(demo)
extended_df[nrow(demo),]
nrow(demo)
extended_df[nrow(demo)+1,]
extended_df[nrow(extended_df),]
# Extract one column from demo to create an additional data frame with the same structure (column names and types)
(new_participant <- demo[18,])
# Extract one column from demo to create an additional data frame with the same structure (column names and types)
(new_participant <- demo[18,])
# Combine using rbind
extended_df <- rbind(demo, new_participant)
extended_df[nrow(extended_df),]
# Merge by participant ID `SEQN` (inner join by default)
merged_df <- merge(demo, bmx, by = "SEQN")
head(merged_df)
knitr::include_graphics(path = "images/joins.png")
colSums(is.na(demo))              # Number of NAs per column
sum(complete.cases(demo))         # Number of rows without any NAs
# Remove rows with any missing values
demo_DMDHRMAR <- na.omit(demo$DMDHRMAR)
colSums(is.na(demo_DMDHRMAR))
# Remove rows with missing values in any column (using na.omit())
demo_no_na <- na.omit(demo)
# Check the resulting data frame and its structure
head(demo_no_na)
# Remove rows with any missing values in the DMDHRMAR column
demo_DMDHRMAR <- demo[!is.na(demo$DMDHRMAR), ]
# Check for missing values
colSums(is.na(demo_DMDHRMAR))
# Check for missing values
colSums(is.na(demo_DMDHRMAR$DMDHRMAR))
colSums(is.na(demo))              # Number of NAs per column
sum(complete.cases(demo))         # Number of rows without any NAs
demo_DMDHRMAR$DMDHRMAR
# Check for missing values
sum(is.na(demo_DMDHRMAR$DMDHRMAR))
knitr::include_graphics(path = "images/rstudio-window-start.png")
head(demo$RIDAGEYR)  # Returns the age column as a vector
# Get a quick statistical summary of some columns
summary(demo[,c('RIAGENDR','DMDHRAGE')])
# Get a quick statistical summary of some columns
summary(demo[,c('RIDAGEYR','DMDHRAGE')])
# Get a quick statistical summary of a few columns
summary(demo[,c('RIDAGEYR','DMDHHSZA','DMDHRAGE')])
