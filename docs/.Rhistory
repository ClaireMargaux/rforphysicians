## two-sample
wilcox_result <- sim.ssize.wilcox.test(rx = rx, ry = ry,
sig.level = 0.05,
type = "two.sample",
alternative = "less",
n.min = 0,
n.max = 100,
iter = 1000)
wilcox_result
## two-sample
wilcox_result <- sim.ssize.wilcox.test(rx = rx, ry = ry,
sig.level = 0.05,
type = "two.sample",
alternative = "less",
n.min = 0,
n.max = 100,
step.size = 1,
iter = 1000)
wilcox_result
## two-sample
wilcox_result <- sim.ssize.wilcox.test(rx = rx, ry = ry,
sig.level = 0.05,
type = "two.sample",
alternative = "less",
n.min = 0,
n.max = 100,
step.size = 1,
iter = 1000,
BREAK = FALSE)
wilcox_result
## two-sample
wilcox_result <- sim.ssize.wilcox.test(rx = rx, ry = ry,
sig.level = 0.05,
type = "two.sample",
alternative = "less",
step.size = 1,
iter = 1000,
BREAK = FALSE)
wilcox_result
## two-sample
wilcox_result <- sim.ssize.wilcox.test(rx = rx, ry = ry,
sig.level = 0.05,
type = "two.sample",
alternative = "less",
step.size = 1,
n.max = 100
iter = 1000,
wilcox_result
## two-sample
wilcox_result <- sim.ssize.wilcox.test(rx = rx, ry = ry,
sig.level = 0.05,
type = "two.sample",
alternative = "less",
step.size = 1,
n.max = 100,
iter = 1000,
BREAK = FALSE)
wilcox_result
## two-sample
wilcox_result <- sim.ssize.wilcox.test(rx = rx, ry = ry,
sig.level = 0.05,
type = "two.sample",
alternative = "less",
step.size = 5,
n.max = 100,
iter = 1000,
BREAK = FALSE)
wilcox_result
# Using the base stats package
power_result <- power.t.test(delta = 3,
sd = 2,
sig.level = 0.05,
power = 0.80,
type = "two.sample",
alternative = 'one.sided')
power_result$n
## two-sample
wilcox_result <- sim.ssize.wilcox.test(rx = rx, ry = ry,
sig.level = 0.05,
type = "two.sample",
alternative = "less",
step.size = 5,
n.max = 100,
iter = 1000,
BREAK = FALSE)
wilcox_result
# Using the base stats package
power_result <- power.t.test(delta = 1,
sd = 2,
sig.level = 0.05,
power = 0.80,
type = "two.sample",
alternative = 'one.sided')
power_result$n
# Using the base stats package
power_result <- power.t.test(delta = 1,
sd = 2,
sig.level = 0.05,
power = 0.80,
type = "two.sample",
alternative = 'two.sided')
power_result$n
# Using the base stats package
power_result <- power.t.test(delta = 1,
sd = 2,
sig.level = 0.05,
power = 0.80,
type = "two.sample",
alternative = 'one.sided')
power_result$n
# Create a sequence of effect sizes
effect_sizes <- seq(0.4, 1.0, by = 0.1)
# Calculate sample sizes for each effect size
sample_sizes <- sapply(effect_sizes, function(d) {
power.t.test(delta = d, sd = 2, sig.level = 0.05, power = 0.80, type = "two.sample")$n
})
# Create a sequence of effect sizes
effect_sizes <- seq(0.5, 1.5, by = 0.1)
# Calculate sample sizes for each effect size
sample_sizes <- sapply(effect_sizes, function(d) {
power.t.test(delta = d, sd = 2, sig.level = 0.05, power = 0.80, type = "two.sample")$n
})
# Plot the results
plot(effect_sizes, sample_sizes, type = "b", col = "darkgreen",
xlab = "Effect Size", ylab = "Sample Size",
main = "Sample Size vs. Effect Size (Two-Sample, unpaired T-Test)")
library("MKpower")
rx <- function(n) rnorm(n, mean = 15, sd = 2)
ry <- function(n) rnorm(n, mean = 19, sd = 2)
## two-sample
wilcox_result <- sim.ssize.wilcox.test(rx = rx, ry = ry,
sig.level = 0.05,
type = "two.sample",
alternative = "less",
step.size = 5,
n.max = 100,
iter = 1000,
BREAK = FALSE)
wilcox_result
rx <- function(n) rnorm(n, mean = 17, sd = 2)
ry <- function(n) rnorm(n, mean = 18, sd = 2)
## two-sample
wilcox_result <- sim.ssize.wilcox.test(rx = rx, ry = ry,
sig.level = 0.05,
type = "two.sample",
alternative = "less",
step.size = 5,
n.max = 100,
iter = 1000,
BREAK = FALSE)
wilcox_result
## two-sample
wilcox_result <- sim.ssize.wilcox.test(rx = rx, ry = ry,
sig.level = 0.05,
type = "two.sample",
alternative = "less",
power = 0.8,
step.size = 1,
n.max = 100,
iter = 1000,
BREAK = TRUE)
wilcox_result
# Using the base stats package
power_result <- power.t.test(delta = 1,
sd = 2,
sig.level = 0.05,
power = 0.80,
type = "two.sample",
alternative = 'one.sided')
power_result$n
## two-sample
wilcox_result <- sim.ssize.wilcox.test(rx = rx, ry = ry,
sig.level = 0.05,
type = "two.sample",
alternative = "less",
power = 0.8,
step.size = 1,
n.max = 100,
iter = 1000,
BREAK = TRUE)
wilcox_result
# Plot the results
plot(wilcox_result$emp.power, wilcox_result$n, type = "b", col = "darkgreen",
xlab = "Effect Size", ylab = "Sample Size",
main = "Sample Size vs. Effect Size (Two-Sample, unpaired T-Test)")
# Plot the results
plot(wilcox_result$emp.power, wilcox_result$n, type = "b", col = "darkgreen",
xlab = "Effect Size", ylab = "Sample Size",
main = "Sample Size vs. Effect Size (Two-Sample, unpaired T-Test)")
# Plot the results
plot(wilcox_result$emp.power, wilcox_result$n, type = "b", col = "darkgreen",
xlab = "Effect Size", ylab = "Sample Size",
main = "Sample Size vs. Effect Size (Two-Sample Wilcoxon Rank Sum Test)")
# Plot the results
plot(wilcox_result$emp.power, wilcox_result$n, type = "s", col = "darkgreen",
xlab = "Effect Size", ylab = "Sample Size",
main = "Sample Size vs. Effect Size (Two-Sample Wilcoxon Rank Sum Test)")
# Plot the results
plot(wilcox_result$emp.power, wilcox_result$n, type = "p", col = "darkgreen",
xlab = "Effect Size", ylab = "Sample Size",
main = "Sample Size vs. Effect Size (Two-Sample Wilcoxon Rank Sum Test)")
# Create a sequence of effect sizes
effect_sizes <- seq(0.5, 1.5, by = 0.1)
# Calculate sample sizes for each effect size
sample_sizes <- sapply(effect_sizes, function(d) {
power.t.test(delta = d, sd = 2, sig.level = 0.05, power = 0.80, type = "two.sample")$n
})
# Plot the results
plot(effect_sizes, sample_sizes, type = "b", col = "darkgreen",
xlab = "Effect Size", ylab = "Sample Size",
main = "Sample Size vs. Effect Size (Two-Sample, unpaired T-Test)")
# Plot the results
plot(wilcox_result$emp.power, wilcox_result$n, type = "p", col = "darkgreen",
xlab = "Effect Size", ylab = "Sample Size",
main = "Sample Size vs. Effect Size (Two-Sample Wilcoxon Rank Sum Test)")
# Plot the results
plot(wilcox_result$emp.power, wilcox_result$n, type = "p", col = "darkgreen",
xlab = "Power", ylab = "Sample Size",
main = "Power vs. Sample Size (Two-Sample Wilcoxon Rank Sum Test)")
# Calculate sample sizes for different effect sizes
effect_sizes <- seq(0.5, 1.5, by = 0.1)
wilcox_result
wilcox_result$n
wilcox_result$n[-1]
wilcox_result$n[1]
# Calculate sample sizes for different effect sizes
effect_sizes_wil <- seq(0.5, 1.5, by = 0.1)
sample_sizes_wil <- sapply(effect_sizes, function(d) {
tail(
sim.ssize.wilcox.test(rx = rnorm(n, mean = (18-d), sd = 2),
ry = ry, sig.level = 0.05, type = "two.sample",
alternative = "less", power = 0.8, step.size = 1,
n.max = 100, iter = 1000, BREAK = TRUE)$n,
n=1)
})
# Calculate sample sizes for different effect sizes
effect_sizes_wil <- seq(0.5, 1.5, by = 0.1)
rx <- function(n, d) rnorm(n, mean = 18 - d, sd = 2)
sample_sizes_wil <- numeric(length(effect_sizes))
for (i in seq_along(effect_sizes)) {
d <- effect_sizes[i]  # Current effect size
# Simulate required sample size
result <- sim.ssize.wilcox.test(rx = rx(50, d),  # Generate rx with n=50
ry = ry,
sig.level = 0.05,
type = "two.sample",
alternative = "less",
power = 0.8,
step.size = 1,
n.max = 100,
iter = 1000,
BREAK = TRUE)
# Store the last sample size result
sample_sizes_wil[i] <- tail(result$n, n = 1)
}
# Calculate sample sizes for different effect sizes
effect_sizes_wil <- seq(0.5, 1.5, by = 0.1)
sample_sizes_wil <- numeric(length(effect_sizes))
for (i in seq_along(effect_sizes)) {
d <- effect_sizes[i]  # Current effect size
rx <- function(n) rnorm(n, mean = 18 - d, sd = 2)
# Simulate required sample size
result <- sim.ssize.wilcox.test(rx = ,  # Generate rx with n=50
ry = ry,
sig.level = 0.05,
type = "two.sample",
alternative = "less",
power = 0.8,
step.size = 1,
n.max = 100,
iter = 1000,
BREAK = TRUE)
# Store the last sample size result
sample_sizes_wil[i] <- tail(result$n, n = 1)
}
# Simulate required sample size
result <- sim.ssize.wilcox.test(rx = rx,  # Generate rx with n=50
ry = ry,
sig.level = 0.05,
type = "two.sample",
alternative = "less",
power = 0.8,
step.size = 1,
n.max = 100,
iter = 1000,
BREAK = TRUE)
# Store the last sample size result
sample_sizes_wil[i] <- tail(result$n, n = 1)
sample_sizes_wil
# Using the base stats package
power_result <- power.t.test(delta = 1,
sd = 2,
sig.level = 0.05,
power = 0.80,
type = "two.sample",
alternative = 'one.sided')
power_result$n
# Calculate sample sizes for different effect sizes
effect_sizes <- seq(0.5, 1.5, by = 0.1)
sample_sizes <- sapply(effect_sizes, function(d) {
power.t.test(delta = d, sd = 2, sig.level = 0.05, power = 0.80, type = "two.sample")$n
})
plot(effect_sizes, sample_sizes, type = "b", col = "darkgreen",
xlab = "Effect Size", ylab = "Sample Size",
main = "Sample Size vs. Effect Size (Two-Sample, unpaired T-Test)")
power_result <- power.t.test(delta = 1,
sd = 2,
sig.level = 0.05,
power = 0.80,
type = "two.sample",
alternative = 'one.sided')
power_result$n
# Calculate sample sizes for different effect sizes
effect_sizes <- seq(0.5, 1.5, by = 0.1)
sample_sizes <- sapply(effect_sizes, function(d) {
power.t.test(delta = d, sd = 2, sig.level = 0.05, power = 0.80, type = "two.sample")$n
})
plot(effect_sizes, sample_sizes, type = "b", col = "darkgreen",
xlab = "Effect Size", ylab = "Sample Size",
main = "Sample Size vs. Effect Size (Two-Sample, unpaired T-Test)")
# Calculate sample sizes for different effect sizes
effect_sizes_wil <- seq(0.5, 1.5, by = 0.1)
sample_sizes_wil <- numeric(length(effect_sizes))
for (i in seq_along(effect_sizes)) {
d <- effect_sizes[i]  # Current effect size
rx <- function(n) rnorm(n, mean = 18 - d, sd = 2)
# Simulate required sample size
result <- sim.ssize.wilcox.test(rx = rx,  # Generate rx with n=50
ry = ry,
sig.level = 0.05,
type = "two.sample",
alternative = "less",
power = 0.8,
step.size = 1,
n.max = 100,
iter = 1000,
BREAK = TRUE)
# Store the last sample size result
sample_sizes_wil[i] <- tail(result$n, n = 1)
}
for (i in seq_along(effect_sizes)) {
d <- effect_sizes[i]  # Current effect size
rx <- function(n) rnorm(n, mean = 18 - d, sd = 2)
# Simulate required sample size
result <- sim.ssize.wilcox.test(rx = rx,  # Generate rx with n=50
ry = ry,
sig.level = 0.05,
type = "two.sample",
alternative = "less",
power = 0.8,
step.size = 1,
n.max = 500,
iter = 1000,
BREAK = TRUE)
# Store the last sample size result
sample_sizes_wil[i] <- tail(result$n, n = 1)
}
sample_sizes_wil
plot(effect_sizes_wil, sample_sizes_wil, type = "b", col = "darkgreen",
xlab = "Effect Size", ylab = "Sample Size",
main = "Sample Size vs. Effect Size (Two-Sample Wilcoxon Rank Sum Test)")
# Simulate required sample size
result <- sim.ssize.wilcox.test(rx = rx,  # Generate rx with n=50
ry = ry,
sig.level = 0.05,
type = "two.sample",
alternative = "less",
power = 0.8,
step.size = 1,
n.max = 500,
iter = 100,
BREAK = TRUE)
# Store the last sample size result
sample_sizes_wil[i] <- tail(result$n, n = 1)
for (i in seq_along(effect_sizes)) {
d <- effect_sizes[i]  # Current effect size
rx <- function(n) rnorm(n, mean = 18 - d, sd = 2)
# Simulate required sample size
result <- sim.ssize.wilcox.test(rx = rx,  # Generate rx with n=50
ry = ry,
sig.level = 0.05,
type = "two.sample",
alternative = "less",
power = 0.8,
step.size = 1,
n.max = 500,
iter = 100,
BREAK = TRUE)
# Store the last sample size result
sample_sizes_wil[i] <- tail(result$n, n = 1)
}
plot(effect_sizes_wil, sample_sizes_wil, type = "b", col = "darkgreen",
xlab = "Effect Size", ylab = "Sample Size",
main = "Sample Size vs. Effect Size (Two-Sample Wilcoxon Rank Sum Test)")
knitr::include_graphics(path = "images/rstudio-window-start.png")
setwd("~/Documents/GitHub/rforphysicians/docs")
knitr::include_graphics(path = "images/rstudio-window-start.png")
# Chunk 1: setup
knitr::opts_chunk$set(
echo = TRUE,
warning = FALSE,
message = FALSE,
fig.height = 5,
fig.width = 6,
eval = TRUE
)
library(ggplot2)
knitr::include_graphics(path = "images/rstudio-window-start.png")
2+2
help(c)
# or equivalently
? c
z <- c(1:3,NA);
ind <- is.na(z)
# Chunk 1: setup
knitr::opts_chunk$set(
echo = TRUE,
warning = FALSE,
message = FALSE,
fig.height = 5,
fig.width = 6,
eval = TRUE
)
library(ggplot2)
# Chunk 2: rstudio-window-start
knitr::include_graphics(path = "images/rstudio-window-start.png")
# Chunk 3
2+2
# Chunk 4
help(c)
# or equivalently
? c
# Chunk 5: rstudio-window
knitr::include_graphics(path = "images/rstudio-window.png")
# Chunk 6
# Here is a comment.
# Chunk 8
# We create an object named 'vec' and assign a sequence of numbers to it.
vec <- 1:10
# 'vec' is the variable. The sequence of numbers (1, 2, 3, ..., 10) is the object.
# Chunk 9
typeof(3.14)
# Chunk 10
typeof(2L)
# Chunk 11
typeof(TRUE)
# Chunk 12
typeof("hello")
# Chunk 13
typeof(1 + 2i)
z <- c(1:3,NA);
ind <- is.na(z)
z <- c(1:3,NA);
is.na(z)
z <- c(1:3,NA)
print(z)
is.na(z)
0/0
Inf - Inf
getwd()
typeof(3.14)
typeof(2L)
vec1 <- c(1,2,3)
# Alternative ways of creating vectors:
vec2 <- 1:3       # Sequence of integers
vec3 <- seq(1, 3) # More general sequence
# To look only at some elements in the vector, we can specify
# which indices we are interested in inside brackets [].
# (Note: in R, indices start with 1.)
vec1[1]
vec2[c(2,3)]
vec3
vec3 <- seq(1, 3, by=1) # More general sequence
vec3
vec1 <- c(1,2,3)
# Alternative ways of creating vectors:
vec2 <- 1:3       # Sequence of integers
vec3 <- seq(1, 3, by=1) # More general sequence
# Accessing elements of the vector by index (R uses 1-based indexing)
vec1[1]  # First element
vec2[c(2, 3)]  # Elements at indices 2 and 3
vec3[c(-1)]  # Elements at indices 2 and 3
vec3[c(-2)]  # All elements except for the element at index 1
mat <- matrix(c(1,2,3,4), nrow = 2, ncol = 2)
mat
(mat <- matrix(c(1,2,3,4), nrow = 2, ncol = 2))
(array <- array(1:8, c(2,4,2)))
(d <- data.frame(id = 1:10, val = c(4,5,2,6,7,9,3,5,8,7)))
(d <- data.frame(id = 1:5,
val = c(4,5,2,6,5),
group = c("exp","control","control","exp","control")))
(d <- data.frame(id = 1:5,
val = c(4,5,2,6,5),
group = c("exp","control","control","exp","control")))
typeof(d)
(d <- data.frame(id = 1:5,
val = c(4,5,2,6,5),
group = c("exp","control","control","exp","control")))
class(d)
(d <- data.frame(id = 1:5,
val = c(4,5,2,6,5),
group = c("exp","control","control","exp","control")))
str(d)
(list <- list(numb = 10:15, char = 'hello'))
(fac <- factor(c("single", "married")))
frac <- function(numerator, denominator) {
result <- numerator / denominator
return(result)
}
frac(6, 2)  # Calling the function
# Example
sum_squared(c(1, 2, 3))
